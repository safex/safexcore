// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocks.proto

#ifndef PROTOBUF_blocks_2eproto__INCLUDED
#define PROTOBUF_blocks_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "transactions.pb.h"
// @@protoc_insertion_point(includes)

namespace safex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_blocks_2eproto();
void protobuf_AssignDesc_blocks_2eproto();
void protobuf_ShutdownFile_blocks_2eproto();

class Block;
class BlockHeader;
class Blocks;

// ===================================================================

class BlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  void Swap(BlockHeader* other);

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const { return New(NULL); }

  BlockHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 depth = 1;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::uint64 depth() const;
  void set_depth(::google::protobuf::uint64 value);

  // optional string hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional uint32 major_version = 3;
  void clear_major_version();
  static const int kMajorVersionFieldNumber = 3;
  ::google::protobuf::uint32 major_version() const;
  void set_major_version(::google::protobuf::uint32 value);

  // optional uint32 minor_version = 4;
  void clear_minor_version();
  static const int kMinorVersionFieldNumber = 4;
  ::google::protobuf::uint32 minor_version() const;
  void set_minor_version(::google::protobuf::uint32 value);

  // optional string prev_hash = 5;
  void clear_prev_hash();
  static const int kPrevHashFieldNumber = 5;
  const ::std::string& prev_hash() const;
  void set_prev_hash(const ::std::string& value);
  void set_prev_hash(const char* value);
  void set_prev_hash(const char* value, size_t size);
  ::std::string* mutable_prev_hash();
  ::std::string* release_prev_hash();
  void set_allocated_prev_hash(::std::string* prev_hash);

  // @@protoc_insertion_point(class_scope:safex.BlockHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 depth_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  ::google::protobuf::internal::ArenaStringPtr prev_hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_blocks_2eproto();
  friend void protobuf_AssignDesc_blocks_2eproto();
  friend void protobuf_ShutdownFile_blocks_2eproto();

  void InitAsDefaultInstance();
  static BlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  inline Block* New() const { return New(NULL); }

  Block* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .safex.BlockHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::safex::BlockHeader& header() const;
  ::safex::BlockHeader* mutable_header();
  ::safex::BlockHeader* release_header();
  void set_allocated_header(::safex::BlockHeader* header);

  // repeated .safex.Transaction txs = 2;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 2;
  const ::safex::Transaction& txs(int index) const;
  ::safex::Transaction* mutable_txs(int index);
  ::safex::Transaction* add_txs();
  ::google::protobuf::RepeatedPtrField< ::safex::Transaction >*
      mutable_txs();
  const ::google::protobuf::RepeatedPtrField< ::safex::Transaction >&
      txs() const;

  // optional .safex.Transaction miner_tx = 3;
  bool has_miner_tx() const;
  void clear_miner_tx();
  static const int kMinerTxFieldNumber = 3;
  const ::safex::Transaction& miner_tx() const;
  ::safex::Transaction* mutable_miner_tx();
  ::safex::Transaction* release_miner_tx();
  void set_allocated_miner_tx(::safex::Transaction* miner_tx);

  // @@protoc_insertion_point(class_scope:safex.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::safex::BlockHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::safex::Transaction > txs_;
  ::safex::Transaction* miner_tx_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_blocks_2eproto();
  friend void protobuf_AssignDesc_blocks_2eproto();
  friend void protobuf_ShutdownFile_blocks_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class Blocks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Blocks) */ {
 public:
  Blocks();
  virtual ~Blocks();

  Blocks(const Blocks& from);

  inline Blocks& operator=(const Blocks& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Blocks& default_instance();

  void Swap(Blocks* other);

  // implements Message ----------------------------------------------

  inline Blocks* New() const { return New(NULL); }

  Blocks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blocks& from);
  void MergeFrom(const Blocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Blocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .safex.Block block = 1;
  int block_size() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::safex::Block& block(int index) const;
  ::safex::Block* mutable_block(int index);
  ::safex::Block* add_block();
  ::google::protobuf::RepeatedPtrField< ::safex::Block >*
      mutable_block();
  const ::google::protobuf::RepeatedPtrField< ::safex::Block >&
      block() const;

  // optional bool status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // optional bool untrusted = 3;
  void clear_untrusted();
  static const int kUntrustedFieldNumber = 3;
  bool untrusted() const;
  void set_untrusted(bool value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:safex.Blocks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::safex::Block > block_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  bool status_;
  bool untrusted_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_blocks_2eproto();
  friend void protobuf_AssignDesc_blocks_2eproto();
  friend void protobuf_ShutdownFile_blocks_2eproto();

  void InitAsDefaultInstance();
  static Blocks* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockHeader

// optional uint64 depth = 1;
inline void BlockHeader::clear_depth() {
  depth_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockHeader::depth() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.depth)
  return depth_;
}
inline void BlockHeader::set_depth(::google::protobuf::uint64 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.depth)
}

// optional string hash = 2;
inline void BlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.hash)
}
inline ::std::string* BlockHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.hash)
}

// optional uint32 major_version = 3;
inline void BlockHeader::clear_major_version() {
  major_version_ = 0u;
}
inline ::google::protobuf::uint32 BlockHeader::major_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.major_version)
  return major_version_;
}
inline void BlockHeader::set_major_version(::google::protobuf::uint32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.major_version)
}

// optional uint32 minor_version = 4;
inline void BlockHeader::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::google::protobuf::uint32 BlockHeader::minor_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.minor_version)
  return minor_version_;
}
inline void BlockHeader::set_minor_version(::google::protobuf::uint32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.minor_version)
}

// optional string prev_hash = 5;
inline void BlockHeader::clear_prev_hash() {
  prev_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::prev_hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.prev_hash)
  return prev_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_prev_hash(const ::std::string& value) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const char* value) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const char* value, size_t size) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.prev_hash)
}
inline ::std::string* BlockHeader::mutable_prev_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.prev_hash)
  return prev_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_prev_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.prev_hash)
  
  return prev_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_prev_hash(::std::string* prev_hash) {
  if (prev_hash != NULL) {
    
  } else {
    
  }
  prev_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.prev_hash)
}

// -------------------------------------------------------------------

// Block

// optional .safex.BlockHeader header = 1;
inline bool Block::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void Block::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::safex::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:safex.Block.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::safex::BlockHeader* Block::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::safex::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:safex.Block.header)
  return header_;
}
inline ::safex::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:safex.Block.header)
  
  ::safex::BlockHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Block::set_allocated_header(::safex::BlockHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.Block.header)
}

// repeated .safex.Transaction txs = 2;
inline int Block::txs_size() const {
  return txs_.size();
}
inline void Block::clear_txs() {
  txs_.Clear();
}
inline const ::safex::Transaction& Block::txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Block.txs)
  return txs_.Get(index);
}
inline ::safex::Transaction* Block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Block.txs)
  return txs_.Mutable(index);
}
inline ::safex::Transaction* Block::add_txs() {
  // @@protoc_insertion_point(field_add:safex.Block.txs)
  return txs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::Transaction >*
Block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Block.txs)
  return &txs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::Transaction >&
Block::txs() const {
  // @@protoc_insertion_point(field_list:safex.Block.txs)
  return txs_;
}

// optional .safex.Transaction miner_tx = 3;
inline bool Block::has_miner_tx() const {
  return !_is_default_instance_ && miner_tx_ != NULL;
}
inline void Block::clear_miner_tx() {
  if (GetArenaNoVirtual() == NULL && miner_tx_ != NULL) delete miner_tx_;
  miner_tx_ = NULL;
}
inline const ::safex::Transaction& Block::miner_tx() const {
  // @@protoc_insertion_point(field_get:safex.Block.miner_tx)
  return miner_tx_ != NULL ? *miner_tx_ : *default_instance_->miner_tx_;
}
inline ::safex::Transaction* Block::mutable_miner_tx() {
  
  if (miner_tx_ == NULL) {
    miner_tx_ = new ::safex::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:safex.Block.miner_tx)
  return miner_tx_;
}
inline ::safex::Transaction* Block::release_miner_tx() {
  // @@protoc_insertion_point(field_release:safex.Block.miner_tx)
  
  ::safex::Transaction* temp = miner_tx_;
  miner_tx_ = NULL;
  return temp;
}
inline void Block::set_allocated_miner_tx(::safex::Transaction* miner_tx) {
  delete miner_tx_;
  miner_tx_ = miner_tx;
  if (miner_tx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.Block.miner_tx)
}

// -------------------------------------------------------------------

// Blocks

// repeated .safex.Block block = 1;
inline int Blocks::block_size() const {
  return block_.size();
}
inline void Blocks::clear_block() {
  block_.Clear();
}
inline const ::safex::Block& Blocks::block(int index) const {
  // @@protoc_insertion_point(field_get:safex.Blocks.block)
  return block_.Get(index);
}
inline ::safex::Block* Blocks::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Blocks.block)
  return block_.Mutable(index);
}
inline ::safex::Block* Blocks::add_block() {
  // @@protoc_insertion_point(field_add:safex.Blocks.block)
  return block_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::Block >*
Blocks::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:safex.Blocks.block)
  return &block_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::Block >&
Blocks::block() const {
  // @@protoc_insertion_point(field_list:safex.Blocks.block)
  return block_;
}

// optional bool status = 2;
inline void Blocks::clear_status() {
  status_ = false;
}
inline bool Blocks::status() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.status)
  return status_;
}
inline void Blocks::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:safex.Blocks.status)
}

// optional bool untrusted = 3;
inline void Blocks::clear_untrusted() {
  untrusted_ = false;
}
inline bool Blocks::untrusted() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.untrusted)
  return untrusted_;
}
inline void Blocks::set_untrusted(bool value) {
  
  untrusted_ = value;
  // @@protoc_insertion_point(field_set:safex.Blocks.untrusted)
}

// optional string error = 4;
inline void Blocks::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Blocks::error() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Blocks::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Blocks.error)
}
inline void Blocks::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Blocks.error)
}
inline void Blocks::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Blocks.error)
}
inline ::std::string* Blocks::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:safex.Blocks.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Blocks::release_error() {
  // @@protoc_insertion_point(field_release:safex.Blocks.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Blocks::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:safex.Blocks.error)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_blocks_2eproto__INCLUDED
