// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output_histogram.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "output_histogram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace safex {

namespace {

const ::google::protobuf::Descriptor* Histogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* Histograms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histograms_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_output_5fhistogram_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_output_5fhistogram_2eproto() {
  protobuf_AddDesc_output_5fhistogram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "output_histogram.proto");
  GOOGLE_CHECK(file != NULL);
  Histogram_descriptor_ = file->message_type(0);
  static const int Histogram_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, out_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, recent_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, total_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, unlocked_instances_),
  };
  Histogram_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Histogram_descriptor_,
      Histogram::default_instance_,
      Histogram_offsets_,
      -1,
      -1,
      -1,
      sizeof(Histogram),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, _is_default_instance_));
  Histograms_descriptor_ = file->message_type(1);
  static const int Histograms_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histograms, histograms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histograms, status_),
  };
  Histograms_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Histograms_descriptor_,
      Histograms::default_instance_,
      Histograms_offsets_,
      -1,
      -1,
      -1,
      sizeof(Histograms),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histograms, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histograms, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_output_5fhistogram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Histogram_descriptor_, &Histogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Histograms_descriptor_, &Histograms::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_output_5fhistogram_2eproto() {
  delete Histogram::default_instance_;
  delete Histogram_reflection_;
  delete Histograms::default_instance_;
  delete Histograms_reflection_;
}

void protobuf_AddDesc_output_5fhistogram_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_output_5fhistogram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026output_histogram.proto\022\005safex\"|\n\tHisto"
    "gram\022\016\n\006amount\030\001 \001(\004\022\020\n\010out_type\030\002 \001(\004\022\030"
    "\n\020recent_instances\030\003 \001(\004\022\027\n\017total_instan"
    "ces\030\004 \001(\004\022\032\n\022unlocked_instances\030\005 \001(\004\"B\n"
    "\nHistograms\022$\n\nhistograms\030\001 \003(\0132\020.safex."
    "Histogram\022\016\n\006status\030\002 \001(\tb\006proto3", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "output_histogram.proto", &protobuf_RegisterTypes);
  Histogram::default_instance_ = new Histogram();
  Histograms::default_instance_ = new Histograms();
  Histogram::default_instance_->InitAsDefaultInstance();
  Histograms::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_output_5fhistogram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_output_5fhistogram_2eproto {
  StaticDescriptorInitializer_output_5fhistogram_2eproto() {
    protobuf_AddDesc_output_5fhistogram_2eproto();
  }
} static_descriptor_initializer_output_5fhistogram_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram::kAmountFieldNumber;
const int Histogram::kOutTypeFieldNumber;
const int Histogram::kRecentInstancesFieldNumber;
const int Histogram::kTotalInstancesFieldNumber;
const int Histogram::kUnlockedInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram::Histogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Histogram)
}

void Histogram::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Histogram::Histogram(const Histogram& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Histogram)
}

void Histogram::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  out_type_ = GOOGLE_ULONGLONG(0);
  recent_instances_ = GOOGLE_ULONGLONG(0);
  total_instances_ = GOOGLE_ULONGLONG(0);
  unlocked_instances_ = GOOGLE_ULONGLONG(0);
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:safex.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Histogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histogram_descriptor_;
}

const Histogram& Histogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_5fhistogram_2eproto();
  return *default_instance_;
}

Histogram* Histogram::default_instance_ = NULL;

Histogram* Histogram::New(::google::protobuf::Arena* arena) const {
  Histogram* n = new Histogram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Histogram)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Histogram, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Histogram*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, unlocked_instances_);

#undef ZR_HELPER_
#undef ZR_

}

bool Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Histogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_out_type;
        break;
      }

      // optional uint64 out_type = 2;
      case 2: {
        if (tag == 16) {
         parse_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recent_instances;
        break;
      }

      // optional uint64 recent_instances = 3;
      case 3: {
        if (tag == 24) {
         parse_recent_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recent_instances_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_instances;
        break;
      }

      // optional uint64 total_instances = 4;
      case 4: {
        if (tag == 32) {
         parse_total_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_instances_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unlocked_instances;
        break;
      }

      // optional uint64 unlocked_instances = 5;
      case 5: {
        if (tag == 40) {
         parse_unlocked_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlocked_instances_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Histogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Histogram)
  return false;
#undef DO_
}

void Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Histogram)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional uint64 out_type = 2;
  if (this->out_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->out_type(), output);
  }

  // optional uint64 recent_instances = 3;
  if (this->recent_instances() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recent_instances(), output);
  }

  // optional uint64 total_instances = 4;
  if (this->total_instances() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_instances(), output);
  }

  // optional uint64 unlocked_instances = 5;
  if (this->unlocked_instances() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->unlocked_instances(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Histogram)
}

::google::protobuf::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Histogram)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional uint64 out_type = 2;
  if (this->out_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->out_type(), target);
  }

  // optional uint64 recent_instances = 3;
  if (this->recent_instances() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recent_instances(), target);
  }

  // optional uint64 total_instances = 4;
  if (this->total_instances() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_instances(), target);
  }

  // optional uint64 unlocked_instances = 5;
  if (this->unlocked_instances() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->unlocked_instances(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Histogram)
  return target;
}

int Histogram::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Histogram)
  int total_size = 0;

  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // optional uint64 out_type = 2;
  if (this->out_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->out_type());
  }

  // optional uint64 recent_instances = 3;
  if (this->recent_instances() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->recent_instances());
  }

  // optional uint64 total_instances = 4;
  if (this->total_instances() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_instances());
  }

  // optional uint64 unlocked_instances = 5;
  if (this->unlocked_instances() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unlocked_instances());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Histogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Histogram* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Histogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Histogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.out_type() != 0) {
    set_out_type(from.out_type());
  }
  if (from.recent_instances() != 0) {
    set_recent_instances(from.recent_instances());
  }
  if (from.total_instances() != 0) {
    set_total_instances(from.total_instances());
  }
  if (from.unlocked_instances() != 0) {
    set_unlocked_instances(from.unlocked_instances());
  }
}

void Histogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {

  return true;
}

void Histogram::Swap(Histogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram::InternalSwap(Histogram* other) {
  std::swap(amount_, other->amount_);
  std::swap(out_type_, other->out_type_);
  std::swap(recent_instances_, other->recent_instances_);
  std::swap(total_instances_, other->total_instances_);
  std::swap(unlocked_instances_, other->unlocked_instances_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histogram_descriptor_;
  metadata.reflection = Histogram_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Histogram

// optional uint64 amount = 1;
void Histogram::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Histogram::amount() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.amount)
  return amount_;
}
 void Histogram::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.amount)
}

// optional uint64 out_type = 2;
void Histogram::clear_out_type() {
  out_type_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Histogram::out_type() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.out_type)
  return out_type_;
}
 void Histogram::set_out_type(::google::protobuf::uint64 value) {
  
  out_type_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.out_type)
}

// optional uint64 recent_instances = 3;
void Histogram::clear_recent_instances() {
  recent_instances_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Histogram::recent_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.recent_instances)
  return recent_instances_;
}
 void Histogram::set_recent_instances(::google::protobuf::uint64 value) {
  
  recent_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.recent_instances)
}

// optional uint64 total_instances = 4;
void Histogram::clear_total_instances() {
  total_instances_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Histogram::total_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.total_instances)
  return total_instances_;
}
 void Histogram::set_total_instances(::google::protobuf::uint64 value) {
  
  total_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.total_instances)
}

// optional uint64 unlocked_instances = 5;
void Histogram::clear_unlocked_instances() {
  unlocked_instances_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Histogram::unlocked_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.unlocked_instances)
  return unlocked_instances_;
}
 void Histogram::set_unlocked_instances(::google::protobuf::uint64 value) {
  
  unlocked_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.unlocked_instances)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histograms::kHistogramsFieldNumber;
const int Histograms::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histograms::Histograms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Histograms)
}

void Histograms::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Histograms::Histograms(const Histograms& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Histograms)
}

void Histograms::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Histograms::~Histograms() {
  // @@protoc_insertion_point(destructor:safex.Histograms)
  SharedDtor();
}

void Histograms::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Histograms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histograms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histograms_descriptor_;
}

const Histograms& Histograms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_5fhistogram_2eproto();
  return *default_instance_;
}

Histograms* Histograms::default_instance_ = NULL;

Histograms* Histograms::New(::google::protobuf::Arena* arena) const {
  Histograms* n = new Histograms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Histograms::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Histograms)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  histograms_.Clear();
}

bool Histograms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Histograms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .safex.Histogram histograms = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_histograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_histograms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional string status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Histograms.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Histograms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Histograms)
  return false;
#undef DO_
}

void Histograms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Histograms)
  // repeated .safex.Histogram histograms = 1;
  for (unsigned int i = 0, n = this->histograms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->histograms(i), output);
  }

  // optional string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Histograms.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Histograms)
}

::google::protobuf::uint8* Histograms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Histograms)
  // repeated .safex.Histogram histograms = 1;
  for (unsigned int i = 0, n = this->histograms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->histograms(i), false, target);
  }

  // optional string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Histograms.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Histograms)
  return target;
}

int Histograms::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Histograms)
  int total_size = 0;

  // optional string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // repeated .safex.Histogram histograms = 1;
  total_size += 1 * this->histograms_size();
  for (int i = 0; i < this->histograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histograms(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histograms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Histograms)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Histograms* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Histograms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Histograms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Histograms)
    MergeFrom(*source);
  }
}

void Histograms::MergeFrom(const Histograms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Histograms)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  histograms_.MergeFrom(from.histograms_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Histograms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Histograms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histograms::CopyFrom(const Histograms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Histograms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histograms::IsInitialized() const {

  return true;
}

void Histograms::Swap(Histograms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histograms::InternalSwap(Histograms* other) {
  histograms_.UnsafeArenaSwap(&other->histograms_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Histograms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histograms_descriptor_;
  metadata.reflection = Histograms_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Histograms

// repeated .safex.Histogram histograms = 1;
int Histograms::histograms_size() const {
  return histograms_.size();
}
void Histograms::clear_histograms() {
  histograms_.Clear();
}
const ::safex::Histogram& Histograms::histograms(int index) const {
  // @@protoc_insertion_point(field_get:safex.Histograms.histograms)
  return histograms_.Get(index);
}
::safex::Histogram* Histograms::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Histograms.histograms)
  return histograms_.Mutable(index);
}
::safex::Histogram* Histograms::add_histograms() {
  // @@protoc_insertion_point(field_add:safex.Histograms.histograms)
  return histograms_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::Histogram >*
Histograms::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:safex.Histograms.histograms)
  return &histograms_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::Histogram >&
Histograms::histograms() const {
  // @@protoc_insertion_point(field_list:safex.Histograms.histograms)
  return histograms_;
}

// optional string status = 2;
void Histograms::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Histograms::status() const {
  // @@protoc_insertion_point(field_get:safex.Histograms.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Histograms::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Histograms.status)
}
 void Histograms::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Histograms.status)
}
 void Histograms::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Histograms.status)
}
 ::std::string* Histograms::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:safex.Histograms.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Histograms::release_status() {
  // @@protoc_insertion_point(field_release:safex.Histograms.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Histograms::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:safex.Histograms.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)
