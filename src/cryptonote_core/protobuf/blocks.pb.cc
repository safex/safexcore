// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocks.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "blocks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace safex {

namespace {

const ::google::protobuf::Descriptor* BlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Blocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Blocks_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_blocks_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_blocks_2eproto() {
  protobuf_AddDesc_blocks_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "blocks.proto");
  GOOGLE_CHECK(file != NULL);
  BlockHeader_descriptor_ = file->message_type(0);
  static const int BlockHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, prev_hash_),
  };
  BlockHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockHeader_descriptor_,
      BlockHeader::default_instance_,
      BlockHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _is_default_instance_));
  Block_descriptor_ = file->message_type(1);
  static const int Block_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, txs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, miner_tx_),
  };
  Block_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      -1,
      -1,
      -1,
      sizeof(Block),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _is_default_instance_));
  Blocks_descriptor_ = file->message_type(2);
  static const int Blocks_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, untrusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, error_),
  };
  Blocks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Blocks_descriptor_,
      Blocks::default_instance_,
      Blocks_offsets_,
      -1,
      -1,
      -1,
      sizeof(Blocks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blocks, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_blocks_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockHeader_descriptor_, &BlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Blocks_descriptor_, &Blocks::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_blocks_2eproto() {
  delete BlockHeader::default_instance_;
  delete BlockHeader_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Blocks::default_instance_;
  delete Blocks_reflection_;
}

void protobuf_AddDesc_blocks_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_blocks_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014blocks.proto\022\005safex\"k\n\013BlockHeader\022\r\n\005"
    "depth\030\001 \001(\004\022\014\n\004hash\030\002 \001(\t\022\025\n\rmajor_versi"
    "on\030\003 \001(\r\022\025\n\rminor_version\030\004 \001(\r\022\021\n\tprev_"
    "hash\030\005 \001(\t\"J\n\005Block\022\"\n\006header\030\001 \001(\0132\022.sa"
    "fex.BlockHeader\022\013\n\003txs\030\002 \003(\t\022\020\n\010miner_tx"
    "\030\003 \001(\t\"W\n\006Blocks\022\033\n\005block\030\001 \003(\0132\014.safex."
    "Block\022\016\n\006status\030\002 \001(\010\022\021\n\tuntrusted\030\003 \001(\010"
    "\022\r\n\005error\030\004 \001(\tb\006proto3", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "blocks.proto", &protobuf_RegisterTypes);
  BlockHeader::default_instance_ = new BlockHeader();
  Block::default_instance_ = new Block();
  Blocks::default_instance_ = new Blocks();
  BlockHeader::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  Blocks::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_blocks_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_blocks_2eproto {
  StaticDescriptorInitializer_blocks_2eproto() {
    protobuf_AddDesc_blocks_2eproto();
  }
} static_descriptor_initializer_blocks_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockHeader::kDepthFieldNumber;
const int BlockHeader::kHashFieldNumber;
const int BlockHeader::kMajorVersionFieldNumber;
const int BlockHeader::kMinorVersionFieldNumber;
const int BlockHeader::kPrevHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockHeader::BlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.BlockHeader)
}

void BlockHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.BlockHeader)
}

void BlockHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = GOOGLE_ULONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  major_version_ = 0u;
  minor_version_ = 0u;
  prev_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:safex.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_descriptor_;
}

const BlockHeader& BlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blocks_2eproto();
  return *default_instance_;
}

BlockHeader* BlockHeader::default_instance_ = NULL;

BlockHeader* BlockHeader::New(::google::protobuf::Arena* arena) const {
  BlockHeader* n = new BlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.BlockHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlockHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major_version_, minor_version_);
  depth_ = GOOGLE_ULONGLONG(0);
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.BlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &depth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional string hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.BlockHeader.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_major_version;
        break;
      }

      // optional uint32 major_version = 3;
      case 3: {
        if (tag == 24) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minor_version;
        break;
      }

      // optional uint32 minor_version = 4;
      case 4: {
        if (tag == 32) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_prev_hash;
        break;
      }

      // optional string prev_hash = 5;
      case 5: {
        if (tag == 42) {
         parse_prev_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_hash().data(), this->prev_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.BlockHeader.prev_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.BlockHeader)
  return false;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.BlockHeader)
  // optional uint64 depth = 1;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->depth(), output);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.BlockHeader.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional uint32 major_version = 3;
  if (this->major_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->major_version(), output);
  }

  // optional uint32 minor_version = 4;
  if (this->minor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minor_version(), output);
  }

  // optional string prev_hash = 5;
  if (this->prev_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_hash().data(), this->prev_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.BlockHeader.prev_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prev_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.BlockHeader)
}

::google::protobuf::uint8* BlockHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.BlockHeader)
  // optional uint64 depth = 1;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->depth(), target);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.BlockHeader.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional uint32 major_version = 3;
  if (this->major_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->major_version(), target);
  }

  // optional uint32 minor_version = 4;
  if (this->minor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minor_version(), target);
  }

  // optional string prev_hash = 5;
  if (this->prev_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_hash().data(), this->prev_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.BlockHeader.prev_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prev_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.BlockHeader)
  return target;
}

int BlockHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.BlockHeader)
  int total_size = 0;

  // optional uint64 depth = 1;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->depth());
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional uint32 major_version = 3;
  if (this->major_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major_version());
  }

  // optional uint32 minor_version = 4;
  if (this->minor_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor_version());
  }

  // optional string prev_hash = 5;
  if (this->prev_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.BlockHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.BlockHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.BlockHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.prev_hash().size() > 0) {

    prev_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_hash_);
  }
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {

  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeader::InternalSwap(BlockHeader* other) {
  std::swap(depth_, other->depth_);
  hash_.Swap(&other->hash_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  prev_hash_.Swap(&other->prev_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockHeader_descriptor_;
  metadata.reflection = BlockHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockHeader

// optional uint64 depth = 1;
void BlockHeader::clear_depth() {
  depth_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::depth() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.depth)
  return depth_;
}
 void BlockHeader::set_depth(::google::protobuf::uint64 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.depth)
}

// optional string hash = 2;
void BlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.hash)
}
 void BlockHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.hash)
}
 void BlockHeader::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.hash)
}
 ::std::string* BlockHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.hash)
}

// optional uint32 major_version = 3;
void BlockHeader::clear_major_version() {
  major_version_ = 0u;
}
 ::google::protobuf::uint32 BlockHeader::major_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.major_version)
  return major_version_;
}
 void BlockHeader::set_major_version(::google::protobuf::uint32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.major_version)
}

// optional uint32 minor_version = 4;
void BlockHeader::clear_minor_version() {
  minor_version_ = 0u;
}
 ::google::protobuf::uint32 BlockHeader::minor_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.minor_version)
  return minor_version_;
}
 void BlockHeader::set_minor_version(::google::protobuf::uint32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:safex.BlockHeader.minor_version)
}

// optional string prev_hash = 5;
void BlockHeader::clear_prev_hash() {
  prev_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockHeader::prev_hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.prev_hash)
  return prev_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_prev_hash(const ::std::string& value) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.prev_hash)
}
 void BlockHeader::set_prev_hash(const char* value) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.prev_hash)
}
 void BlockHeader::set_prev_hash(const char* value, size_t size) {
  
  prev_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.prev_hash)
}
 ::std::string* BlockHeader::mutable_prev_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.prev_hash)
  return prev_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_prev_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.prev_hash)
  
  return prev_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_prev_hash(::std::string* prev_hash) {
  if (prev_hash != NULL) {
    
  } else {
    
  }
  prev_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.prev_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHeaderFieldNumber;
const int Block::kTxsFieldNumber;
const int Block::kMinerTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Block)
}

void Block::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::safex::BlockHeader*>(&::safex::BlockHeader::default_instance());
}

Block::Block(const Block& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Block)
}

void Block::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  miner_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:safex.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  miner_tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blocks_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Block)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  miner_tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safex.BlockHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txs;
        break;
      }

      // repeated string txs = 2;
      case 2: {
        if (tag == 18) {
         parse_txs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_txs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txs(this->txs_size() - 1).data(),
            this->txs(this->txs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Block.txs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txs;
        if (input->ExpectTag(26)) goto parse_miner_tx;
        break;
      }

      // optional string miner_tx = 3;
      case 3: {
        if (tag == 26) {
         parse_miner_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miner_tx()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->miner_tx().data(), this->miner_tx().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Block.miner_tx"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Block)
  // optional .safex.BlockHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string txs = 2;
  for (int i = 0; i < this->txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txs(i).data(), this->txs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Block.txs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->txs(i), output);
  }

  // optional string miner_tx = 3;
  if (this->miner_tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->miner_tx().data(), this->miner_tx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Block.miner_tx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->miner_tx(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Block)
  // optional .safex.BlockHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string txs = 2;
  for (int i = 0; i < this->txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txs(i).data(), this->txs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Block.txs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->txs(i), target);
  }

  // optional string miner_tx = 3;
  if (this->miner_tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->miner_tx().data(), this->miner_tx().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Block.miner_tx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->miner_tx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Block)
  return target;
}

int Block::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Block)
  int total_size = 0;

  // optional .safex.BlockHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional string miner_tx = 3;
  if (this->miner_tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->miner_tx());
  }

  // repeated string txs = 2;
  total_size += 1 * this->txs_size();
  for (int i = 0; i < this->txs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->txs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Block)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Block* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Block)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  txs_.MergeFrom(from.txs_);
  if (from.has_header()) {
    mutable_header()->::safex::BlockHeader::MergeFrom(from.header());
  }
  if (from.miner_tx().size() > 0) {

    miner_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.miner_tx_);
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  std::swap(header_, other->header_);
  txs_.UnsafeArenaSwap(&other->txs_);
  miner_tx_.Swap(&other->miner_tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// optional .safex.BlockHeader header = 1;
bool Block::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void Block::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::safex::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:safex.Block.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::safex::BlockHeader* Block::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::safex::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:safex.Block.header)
  return header_;
}
::safex::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:safex.Block.header)
  
  ::safex::BlockHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void Block::set_allocated_header(::safex::BlockHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.Block.header)
}

// repeated string txs = 2;
int Block::txs_size() const {
  return txs_.size();
}
void Block::clear_txs() {
  txs_.Clear();
}
 const ::std::string& Block::txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Block.txs)
  return txs_.Get(index);
}
 ::std::string* Block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Block.txs)
  return txs_.Mutable(index);
}
 void Block::set_txs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:safex.Block.txs)
  txs_.Mutable(index)->assign(value);
}
 void Block::set_txs(int index, const char* value) {
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safex.Block.txs)
}
 void Block::set_txs(int index, const char* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safex.Block.txs)
}
 ::std::string* Block::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:safex.Block.txs)
  return txs_.Add();
}
 void Block::add_txs(const ::std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safex.Block.txs)
}
 void Block::add_txs(const char* value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safex.Block.txs)
}
 void Block::add_txs(const char* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safex.Block.txs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Block::txs() const {
  // @@protoc_insertion_point(field_list:safex.Block.txs)
  return txs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Block.txs)
  return &txs_;
}

// optional string miner_tx = 3;
void Block::clear_miner_tx() {
  miner_tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Block::miner_tx() const {
  // @@protoc_insertion_point(field_get:safex.Block.miner_tx)
  return miner_tx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_miner_tx(const ::std::string& value) {
  
  miner_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Block.miner_tx)
}
 void Block::set_miner_tx(const char* value) {
  
  miner_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Block.miner_tx)
}
 void Block::set_miner_tx(const char* value, size_t size) {
  
  miner_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Block.miner_tx)
}
 ::std::string* Block::mutable_miner_tx() {
  
  // @@protoc_insertion_point(field_mutable:safex.Block.miner_tx)
  return miner_tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_miner_tx() {
  // @@protoc_insertion_point(field_release:safex.Block.miner_tx)
  
  return miner_tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_miner_tx(::std::string* miner_tx) {
  if (miner_tx != NULL) {
    
  } else {
    
  }
  miner_tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), miner_tx);
  // @@protoc_insertion_point(field_set_allocated:safex.Block.miner_tx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Blocks::kBlockFieldNumber;
const int Blocks::kStatusFieldNumber;
const int Blocks::kUntrustedFieldNumber;
const int Blocks::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Blocks::Blocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Blocks)
}

void Blocks::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Blocks::Blocks(const Blocks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Blocks)
}

void Blocks::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = false;
  untrusted_ = false;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Blocks::~Blocks() {
  // @@protoc_insertion_point(destructor:safex.Blocks)
  SharedDtor();
}

void Blocks::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Blocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Blocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Blocks_descriptor_;
}

const Blocks& Blocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_blocks_2eproto();
  return *default_instance_;
}

Blocks* Blocks::default_instance_ = NULL;

Blocks* Blocks::New(::google::protobuf::Arena* arena) const {
  Blocks* n = new Blocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Blocks)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Blocks, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Blocks*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, untrusted_);
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  block_.Clear();
}

bool Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Blocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .safex.Block block = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_block;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_untrusted;
        break;
      }

      // optional bool untrusted = 3;
      case 3: {
        if (tag == 24) {
         parse_untrusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &untrusted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Blocks.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Blocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Blocks)
  return false;
#undef DO_
}

void Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Blocks)
  // repeated .safex.Block block = 1;
  for (unsigned int i = 0, n = this->block_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(i), output);
  }

  // optional bool status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional bool untrusted = 3;
  if (this->untrusted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->untrusted(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Blocks.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Blocks)
}

::google::protobuf::uint8* Blocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Blocks)
  // repeated .safex.Block block = 1;
  for (unsigned int i = 0, n = this->block_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->block(i), false, target);
  }

  // optional bool status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional bool untrusted = 3;
  if (this->untrusted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->untrusted(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Blocks.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Blocks)
  return target;
}

int Blocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Blocks)
  int total_size = 0;

  // optional bool status = 2;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // optional bool untrusted = 3;
  if (this->untrusted() != 0) {
    total_size += 1 + 1;
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // repeated .safex.Block block = 1;
  total_size += 1 * this->block_size();
  for (int i = 0; i < this->block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Blocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Blocks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Blocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Blocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Blocks)
    MergeFrom(*source);
  }
}

void Blocks::MergeFrom(const Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Blocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  block_.MergeFrom(from.block_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.untrusted() != 0) {
    set_untrusted(from.untrusted());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void Blocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blocks::CopyFrom(const Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blocks::IsInitialized() const {

  return true;
}

void Blocks::Swap(Blocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Blocks::InternalSwap(Blocks* other) {
  block_.UnsafeArenaSwap(&other->block_);
  std::swap(status_, other->status_);
  std::swap(untrusted_, other->untrusted_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Blocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Blocks_descriptor_;
  metadata.reflection = Blocks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Blocks

// repeated .safex.Block block = 1;
int Blocks::block_size() const {
  return block_.size();
}
void Blocks::clear_block() {
  block_.Clear();
}
const ::safex::Block& Blocks::block(int index) const {
  // @@protoc_insertion_point(field_get:safex.Blocks.block)
  return block_.Get(index);
}
::safex::Block* Blocks::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Blocks.block)
  return block_.Mutable(index);
}
::safex::Block* Blocks::add_block() {
  // @@protoc_insertion_point(field_add:safex.Blocks.block)
  return block_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::Block >*
Blocks::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:safex.Blocks.block)
  return &block_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::Block >&
Blocks::block() const {
  // @@protoc_insertion_point(field_list:safex.Blocks.block)
  return block_;
}

// optional bool status = 2;
void Blocks::clear_status() {
  status_ = false;
}
 bool Blocks::status() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.status)
  return status_;
}
 void Blocks::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:safex.Blocks.status)
}

// optional bool untrusted = 3;
void Blocks::clear_untrusted() {
  untrusted_ = false;
}
 bool Blocks::untrusted() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.untrusted)
  return untrusted_;
}
 void Blocks::set_untrusted(bool value) {
  
  untrusted_ = value;
  // @@protoc_insertion_point(field_set:safex.Blocks.untrusted)
}

// optional string error = 4;
void Blocks::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Blocks::error() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Blocks::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Blocks.error)
}
 void Blocks::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Blocks.error)
}
 void Blocks::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Blocks.error)
}
 ::std::string* Blocks::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:safex.Blocks.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Blocks::release_error() {
  // @@protoc_insertion_point(field_release:safex.Blocks.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Blocks::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:safex.Blocks.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)
