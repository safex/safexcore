// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transactions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace safex {

namespace {

const ::google::protobuf::Descriptor* txin_gen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txin_gen_reflection_ = NULL;
const ::google::protobuf::Descriptor* txin_to_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txin_to_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* txin_token_to_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txin_token_to_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* txin_token_migration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txin_token_migration_reflection_ = NULL;
const ::google::protobuf::Descriptor* txin_v_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txin_v_reflection_ = NULL;
const ::google::protobuf::Descriptor* txout_to_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txout_to_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* txout_token_to_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txout_token_to_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* txout_target_v_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txout_target_v_reflection_ = NULL;
const ::google::protobuf::Descriptor* txout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  txout_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transactions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transactions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transactions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_transactions_2eproto() {
  protobuf_AddDesc_transactions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transactions.proto");
  GOOGLE_CHECK(file != NULL);
  txin_gen_descriptor_ = file->message_type(0);
  static const int txin_gen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_gen, height_),
  };
  txin_gen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txin_gen_descriptor_,
      txin_gen::default_instance_,
      txin_gen_offsets_,
      -1,
      -1,
      -1,
      sizeof(txin_gen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_gen, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_gen, _is_default_instance_));
  txin_to_key_descriptor_ = file->message_type(1);
  static const int txin_to_key_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_to_key, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_to_key, k_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_to_key, key_offsets_),
  };
  txin_to_key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txin_to_key_descriptor_,
      txin_to_key::default_instance_,
      txin_to_key_offsets_,
      -1,
      -1,
      -1,
      sizeof(txin_to_key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_to_key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_to_key, _is_default_instance_));
  txin_token_to_key_descriptor_ = file->message_type(2);
  static const int txin_token_to_key_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_to_key, token_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_to_key, k_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_to_key, key_offsets_),
  };
  txin_token_to_key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txin_token_to_key_descriptor_,
      txin_token_to_key::default_instance_,
      txin_token_to_key_offsets_,
      -1,
      -1,
      -1,
      sizeof(txin_token_to_key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_to_key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_to_key, _is_default_instance_));
  txin_token_migration_descriptor_ = file->message_type(3);
  static const int txin_token_migration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_migration, token_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_migration, bitcoin_burn_transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_migration, k_image_),
  };
  txin_token_migration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txin_token_migration_descriptor_,
      txin_token_migration::default_instance_,
      txin_token_migration_offsets_,
      -1,
      -1,
      -1,
      sizeof(txin_token_migration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_migration, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_token_migration, _is_default_instance_));
  txin_v_descriptor_ = file->message_type(4);
  static const int txin_v_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, txin_gen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, txin_to_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, txin_token_to_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, txin_token_migration_),
  };
  txin_v_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txin_v_descriptor_,
      txin_v::default_instance_,
      txin_v_offsets_,
      -1,
      -1,
      -1,
      sizeof(txin_v),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txin_v, _is_default_instance_));
  txout_to_key_descriptor_ = file->message_type(5);
  static const int txout_to_key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_to_key, key_),
  };
  txout_to_key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txout_to_key_descriptor_,
      txout_to_key::default_instance_,
      txout_to_key_offsets_,
      -1,
      -1,
      -1,
      sizeof(txout_to_key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_to_key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_to_key, _is_default_instance_));
  txout_token_to_key_descriptor_ = file->message_type(6);
  static const int txout_token_to_key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_token_to_key, key_),
  };
  txout_token_to_key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txout_token_to_key_descriptor_,
      txout_token_to_key::default_instance_,
      txout_token_to_key_offsets_,
      -1,
      -1,
      -1,
      sizeof(txout_token_to_key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_token_to_key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_token_to_key, _is_default_instance_));
  txout_target_v_descriptor_ = file->message_type(7);
  static const int txout_target_v_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_target_v, txout_to_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_target_v, txout_token_to_key_),
  };
  txout_target_v_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txout_target_v_descriptor_,
      txout_target_v::default_instance_,
      txout_target_v_offsets_,
      -1,
      -1,
      -1,
      sizeof(txout_target_v),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_target_v, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout_target_v, _is_default_instance_));
  txout_descriptor_ = file->message_type(8);
  static const int txout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout, token_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout, target_),
  };
  txout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      txout_descriptor_,
      txout::default_instance_,
      txout_offsets_,
      -1,
      -1,
      -1,
      sizeof(txout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(txout, _is_default_instance_));
  SigData_descriptor_ = file->message_type(9);
  static const int SigData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigData, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigData, c_),
  };
  SigData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SigData_descriptor_,
      SigData::default_instance_,
      SigData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SigData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigData, _is_default_instance_));
  Signature_descriptor_ = file->message_type(10);
  static const int Signature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signature_),
  };
  Signature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Signature_descriptor_,
      Signature::default_instance_,
      Signature_offsets_,
      -1,
      -1,
      -1,
      sizeof(Signature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _is_default_instance_));
  Transaction_descriptor_ = file->message_type(11);
  static const int Transaction_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, unlock_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, vin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, vout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, signatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, block_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, block_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, double_spend_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, in_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, output_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, tx_hash_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _is_default_instance_));
  Transactions_descriptor_ = file->message_type(12);
  static const int Transactions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transactions, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transactions, missed_txs_),
  };
  Transactions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transactions_descriptor_,
      Transactions::default_instance_,
      Transactions_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transactions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transactions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transactions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transactions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txin_gen_descriptor_, &txin_gen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txin_to_key_descriptor_, &txin_to_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txin_token_to_key_descriptor_, &txin_token_to_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txin_token_migration_descriptor_, &txin_token_migration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txin_v_descriptor_, &txin_v::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txout_to_key_descriptor_, &txout_to_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txout_token_to_key_descriptor_, &txout_token_to_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txout_target_v_descriptor_, &txout_target_v::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      txout_descriptor_, &txout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SigData_descriptor_, &SigData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Signature_descriptor_, &Signature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transactions_descriptor_, &Transactions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transactions_2eproto() {
  delete txin_gen::default_instance_;
  delete txin_gen_reflection_;
  delete txin_to_key::default_instance_;
  delete txin_to_key_reflection_;
  delete txin_token_to_key::default_instance_;
  delete txin_token_to_key_reflection_;
  delete txin_token_migration::default_instance_;
  delete txin_token_migration_reflection_;
  delete txin_v::default_instance_;
  delete txin_v_reflection_;
  delete txout_to_key::default_instance_;
  delete txout_to_key_reflection_;
  delete txout_token_to_key::default_instance_;
  delete txout_token_to_key_reflection_;
  delete txout_target_v::default_instance_;
  delete txout_target_v_reflection_;
  delete txout::default_instance_;
  delete txout_reflection_;
  delete SigData::default_instance_;
  delete SigData_reflection_;
  delete Signature::default_instance_;
  delete Signature_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete Transactions::default_instance_;
  delete Transactions_reflection_;
}

void protobuf_AddDesc_transactions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_transactions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022transactions.proto\022\005safex\"\032\n\010txin_gen\022"
    "\016\n\006height\030\001 \001(\004\"C\n\013txin_to_key\022\016\n\006amount"
    "\030\001 \001(\004\022\017\n\007k_image\030\002 \001(\014\022\023\n\013key_offsets\030\003"
    " \003(\004\"O\n\021txin_token_to_key\022\024\n\014token_amoun"
    "t\030\001 \001(\004\022\017\n\007k_image\030\002 \001(\014\022\023\n\013key_offsets\030"
    "\003 \003(\004\"_\n\024txin_token_migration\022\024\n\014token_a"
    "mount\030\001 \001(\004\022 \n\030bitcoin_burn_transaction\030"
    "\002 \001(\t\022\017\n\007k_image\030\003 \001(\014\"\304\001\n\006txin_v\022!\n\010txi"
    "n_gen\030\001 \001(\0132\017.safex.txin_gen\022\'\n\013txin_to_"
    "key\030\002 \001(\0132\022.safex.txin_to_key\0223\n\021txin_to"
    "ken_to_key\030\003 \001(\0132\030.safex.txin_token_to_k"
    "ey\0229\n\024txin_token_migration\030\004 \001(\0132\033.safex"
    ".txin_token_migration\"\033\n\014txout_to_key\022\013\n"
    "\003key\030\001 \001(\014\"!\n\022txout_token_to_key\022\013\n\003key\030"
    "\001 \001(\014\"r\n\016txout_target_v\022)\n\014txout_to_key\030"
    "\001 \001(\0132\023.safex.txout_to_key\0225\n\022txout_toke"
    "n_to_key\030\002 \001(\0132\031.safex.txout_token_to_ke"
    "y\"T\n\005txout\022\016\n\006amount\030\001 \001(\004\022\024\n\014token_amou"
    "nt\030\002 \001(\004\022%\n\006target\030\003 \001(\0132\025.safex.txout_t"
    "arget_v\"\037\n\007SigData\022\t\n\001r\030\001 \001(\014\022\t\n\001c\030\002 \001(\014"
    "\".\n\tSignature\022!\n\tsignature\030\001 \003(\0132\016.safex"
    ".SigData\"\244\002\n\013Transaction\022\017\n\007version\030\001 \001("
    "\004\022\023\n\013unlock_time\030\002 \001(\004\022\r\n\005extra\030\003 \001(\014\022\032\n"
    "\003vin\030\004 \003(\0132\r.safex.txin_v\022\032\n\004vout\030\005 \003(\0132"
    "\014.safex.txout\022$\n\nsignatures\030\006 \003(\0132\020.safe"
    "x.Signature\022\024\n\014block_height\030\007 \001(\004\022\027\n\017blo"
    "ck_timestamp\030\010 \001(\004\022\031\n\021double_spend_seen\030"
    "\t \001(\010\022\017\n\007in_pool\030\n \001(\010\022\026\n\016output_indices"
    "\030\013 \003(\004\022\017\n\007tx_hash\030\014 \001(\t\"B\n\014Transactions\022"
    "\036\n\002tx\030\001 \003(\0132\022.safex.Transaction\022\022\n\nmisse"
    "d_txs\030\002 \003(\tb\006proto3", 1219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transactions.proto", &protobuf_RegisterTypes);
  txin_gen::default_instance_ = new txin_gen();
  txin_to_key::default_instance_ = new txin_to_key();
  txin_token_to_key::default_instance_ = new txin_token_to_key();
  txin_token_migration::default_instance_ = new txin_token_migration();
  txin_v::default_instance_ = new txin_v();
  txout_to_key::default_instance_ = new txout_to_key();
  txout_token_to_key::default_instance_ = new txout_token_to_key();
  txout_target_v::default_instance_ = new txout_target_v();
  txout::default_instance_ = new txout();
  SigData::default_instance_ = new SigData();
  Signature::default_instance_ = new Signature();
  Transaction::default_instance_ = new Transaction();
  Transactions::default_instance_ = new Transactions();
  txin_gen::default_instance_->InitAsDefaultInstance();
  txin_to_key::default_instance_->InitAsDefaultInstance();
  txin_token_to_key::default_instance_->InitAsDefaultInstance();
  txin_token_migration::default_instance_->InitAsDefaultInstance();
  txin_v::default_instance_->InitAsDefaultInstance();
  txout_to_key::default_instance_->InitAsDefaultInstance();
  txout_token_to_key::default_instance_->InitAsDefaultInstance();
  txout_target_v::default_instance_->InitAsDefaultInstance();
  txout::default_instance_->InitAsDefaultInstance();
  SigData::default_instance_->InitAsDefaultInstance();
  Signature::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  Transactions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transactions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transactions_2eproto {
  StaticDescriptorInitializer_transactions_2eproto() {
    protobuf_AddDesc_transactions_2eproto();
  }
} static_descriptor_initializer_transactions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txin_gen::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txin_gen::txin_gen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_gen)
}

void txin_gen::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txin_gen::txin_gen(const txin_gen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txin_gen)
}

void txin_gen::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  height_ = GOOGLE_ULONGLONG(0);
}

txin_gen::~txin_gen() {
  // @@protoc_insertion_point(destructor:safex.txin_gen)
  SharedDtor();
}

void txin_gen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void txin_gen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txin_gen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txin_gen_descriptor_;
}

const txin_gen& txin_gen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txin_gen* txin_gen::default_instance_ = NULL;

txin_gen* txin_gen::New(::google::protobuf::Arena* arena) const {
  txin_gen* n = new txin_gen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txin_gen::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_gen)
  height_ = GOOGLE_ULONGLONG(0);
}

bool txin_gen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txin_gen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txin_gen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txin_gen)
  return false;
#undef DO_
}

void txin_gen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txin_gen)
  // optional uint64 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txin_gen)
}

::google::protobuf::uint8* txin_gen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_gen)
  // optional uint64 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_gen)
  return target;
}

int txin_gen::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_gen)
  int total_size = 0;

  // optional uint64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txin_gen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_gen)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txin_gen* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txin_gen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_gen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_gen)
    MergeFrom(*source);
  }
}

void txin_gen::MergeFrom(const txin_gen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_gen)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void txin_gen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_gen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_gen::CopyFrom(const txin_gen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_gen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_gen::IsInitialized() const {

  return true;
}

void txin_gen::Swap(txin_gen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txin_gen::InternalSwap(txin_gen* other) {
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txin_gen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txin_gen_descriptor_;
  metadata.reflection = txin_gen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_gen

// optional uint64 height = 1;
void txin_gen::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txin_gen::height() const {
  // @@protoc_insertion_point(field_get:safex.txin_gen.height)
  return height_;
}
 void txin_gen::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_gen.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txin_to_key::kAmountFieldNumber;
const int txin_to_key::kKImageFieldNumber;
const int txin_to_key::kKeyOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txin_to_key::txin_to_key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_to_key)
}

void txin_to_key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txin_to_key::txin_to_key(const txin_to_key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txin_to_key)
}

void txin_to_key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  k_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

txin_to_key::~txin_to_key() {
  // @@protoc_insertion_point(destructor:safex.txin_to_key)
  SharedDtor();
}

void txin_to_key::SharedDtor() {
  k_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void txin_to_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txin_to_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txin_to_key_descriptor_;
}

const txin_to_key& txin_to_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txin_to_key* txin_to_key::default_instance_ = NULL;

txin_to_key* txin_to_key::New(::google::protobuf::Arena* arena) const {
  txin_to_key* n = new txin_to_key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txin_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_to_key)
  amount_ = GOOGLE_ULONGLONG(0);
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_offsets_.Clear();
}

bool txin_to_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txin_to_key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_k_image;
        break;
      }

      // optional bytes k_image = 2;
      case 2: {
        if (tag == 18) {
         parse_k_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key_offsets;
        break;
      }

      // repeated uint64 key_offsets = 3;
      case 3: {
        if (tag == 26) {
         parse_key_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key_offsets())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_key_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txin_to_key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txin_to_key)
  return false;
#undef DO_
}

void txin_to_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txin_to_key)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->k_image(), output);
  }

  // repeated uint64 key_offsets = 3;
  if (this->key_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->key_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->key_offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txin_to_key)
}

::google::protobuf::uint8* txin_to_key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_to_key)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->k_image(), target);
  }

  // repeated uint64 key_offsets = 3;
  if (this->key_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _key_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->key_offsets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_to_key)
  return target;
}

int txin_to_key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_to_key)
  int total_size = 0;

  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->k_image());
  }

  // repeated uint64 key_offsets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->key_offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txin_to_key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txin_to_key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txin_to_key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_to_key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_to_key)
    MergeFrom(*source);
  }
}

void txin_to_key::MergeFrom(const txin_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_offsets_.MergeFrom(from.key_offsets_);
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
}

void txin_to_key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_to_key::CopyFrom(const txin_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_to_key::IsInitialized() const {

  return true;
}

void txin_to_key::Swap(txin_to_key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txin_to_key::InternalSwap(txin_to_key* other) {
  std::swap(amount_, other->amount_);
  k_image_.Swap(&other->k_image_);
  key_offsets_.UnsafeArenaSwap(&other->key_offsets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txin_to_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txin_to_key_descriptor_;
  metadata.reflection = txin_to_key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_to_key

// optional uint64 amount = 1;
void txin_to_key::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txin_to_key::amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.amount)
  return amount_;
}
 void txin_to_key::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_to_key.amount)
}

// optional bytes k_image = 2;
void txin_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txin_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_to_key::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.k_image)
}
 void txin_to_key::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_to_key.k_image)
}
 void txin_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_to_key.k_image)
}
 ::std::string* txin_to_key::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_to_key.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txin_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_to_key::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
int txin_to_key::key_offsets_size() const {
  return key_offsets_.size();
}
void txin_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
 ::google::protobuf::uint64 txin_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.key_offsets)
  return key_offsets_.Get(index);
}
 void txin_to_key::set_key_offsets(int index, ::google::protobuf::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.key_offsets)
}
 void txin_to_key::add_key_offsets(::google::protobuf::uint64 value) {
  key_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:safex.txin_to_key.key_offsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
txin_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_to_key.key_offsets)
  return key_offsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
txin_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_to_key.key_offsets)
  return &key_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txin_token_to_key::kTokenAmountFieldNumber;
const int txin_token_to_key::kKImageFieldNumber;
const int txin_token_to_key::kKeyOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txin_token_to_key::txin_token_to_key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_token_to_key)
}

void txin_token_to_key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txin_token_to_key::txin_token_to_key(const txin_token_to_key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txin_token_to_key)
}

void txin_token_to_key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_amount_ = GOOGLE_ULONGLONG(0);
  k_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

txin_token_to_key::~txin_token_to_key() {
  // @@protoc_insertion_point(destructor:safex.txin_token_to_key)
  SharedDtor();
}

void txin_token_to_key::SharedDtor() {
  k_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void txin_token_to_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txin_token_to_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txin_token_to_key_descriptor_;
}

const txin_token_to_key& txin_token_to_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txin_token_to_key* txin_token_to_key::default_instance_ = NULL;

txin_token_to_key* txin_token_to_key::New(::google::protobuf::Arena* arena) const {
  txin_token_to_key* n = new txin_token_to_key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txin_token_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_token_to_key)
  token_amount_ = GOOGLE_ULONGLONG(0);
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_offsets_.Clear();
}

bool txin_token_to_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txin_token_to_key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_k_image;
        break;
      }

      // optional bytes k_image = 2;
      case 2: {
        if (tag == 18) {
         parse_k_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key_offsets;
        break;
      }

      // repeated uint64 key_offsets = 3;
      case 3: {
        if (tag == 26) {
         parse_key_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key_offsets())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_key_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txin_token_to_key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txin_token_to_key)
  return false;
#undef DO_
}

void txin_token_to_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txin_token_to_key)
  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token_amount(), output);
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->k_image(), output);
  }

  // repeated uint64 key_offsets = 3;
  if (this->key_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->key_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->key_offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txin_token_to_key)
}

::google::protobuf::uint8* txin_token_to_key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_token_to_key)
  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token_amount(), target);
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->k_image(), target);
  }

  // repeated uint64 key_offsets = 3;
  if (this->key_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _key_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->key_offsets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_token_to_key)
  return target;
}

int txin_token_to_key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_token_to_key)
  int total_size = 0;

  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token_amount());
  }

  // optional bytes k_image = 2;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->k_image());
  }

  // repeated uint64 key_offsets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->key_offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txin_token_to_key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_token_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txin_token_to_key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txin_token_to_key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_token_to_key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_token_to_key)
    MergeFrom(*source);
  }
}

void txin_token_to_key::MergeFrom(const txin_token_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_token_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_offsets_.MergeFrom(from.key_offsets_);
  if (from.token_amount() != 0) {
    set_token_amount(from.token_amount());
  }
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
}

void txin_token_to_key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_token_to_key::CopyFrom(const txin_token_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_token_to_key::IsInitialized() const {

  return true;
}

void txin_token_to_key::Swap(txin_token_to_key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txin_token_to_key::InternalSwap(txin_token_to_key* other) {
  std::swap(token_amount_, other->token_amount_);
  k_image_.Swap(&other->k_image_);
  key_offsets_.UnsafeArenaSwap(&other->key_offsets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txin_token_to_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txin_token_to_key_descriptor_;
  metadata.reflection = txin_token_to_key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_token_to_key

// optional uint64 token_amount = 1;
void txin_token_to_key::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txin_token_to_key::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.token_amount)
  return token_amount_;
}
 void txin_token_to_key::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.token_amount)
}

// optional bytes k_image = 2;
void txin_token_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txin_token_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_to_key::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.k_image)
}
 void txin_token_to_key::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_to_key.k_image)
}
 void txin_token_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_to_key.k_image)
}
 ::std::string* txin_token_to_key::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_to_key.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txin_token_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_to_key::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
int txin_token_to_key::key_offsets_size() const {
  return key_offsets_.size();
}
void txin_token_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
 ::google::protobuf::uint64 txin_token_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.key_offsets)
  return key_offsets_.Get(index);
}
 void txin_token_to_key::set_key_offsets(int index, ::google::protobuf::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.key_offsets)
}
 void txin_token_to_key::add_key_offsets(::google::protobuf::uint64 value) {
  key_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:safex.txin_token_to_key.key_offsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
txin_token_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_token_to_key.key_offsets)
  return key_offsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
txin_token_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_token_to_key.key_offsets)
  return &key_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txin_token_migration::kTokenAmountFieldNumber;
const int txin_token_migration::kBitcoinBurnTransactionFieldNumber;
const int txin_token_migration::kKImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txin_token_migration::txin_token_migration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_token_migration)
}

void txin_token_migration::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txin_token_migration::txin_token_migration(const txin_token_migration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txin_token_migration)
}

void txin_token_migration::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_amount_ = GOOGLE_ULONGLONG(0);
  bitcoin_burn_transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

txin_token_migration::~txin_token_migration() {
  // @@protoc_insertion_point(destructor:safex.txin_token_migration)
  SharedDtor();
}

void txin_token_migration::SharedDtor() {
  bitcoin_burn_transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void txin_token_migration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txin_token_migration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txin_token_migration_descriptor_;
}

const txin_token_migration& txin_token_migration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txin_token_migration* txin_token_migration::default_instance_ = NULL;

txin_token_migration* txin_token_migration::New(::google::protobuf::Arena* arena) const {
  txin_token_migration* n = new txin_token_migration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txin_token_migration::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_token_migration)
  token_amount_ = GOOGLE_ULONGLONG(0);
  bitcoin_burn_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool txin_token_migration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txin_token_migration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bitcoin_burn_transaction;
        break;
      }

      // optional string bitcoin_burn_transaction = 2;
      case 2: {
        if (tag == 18) {
         parse_bitcoin_burn_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_burn_transaction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bitcoin_burn_transaction().data(), this->bitcoin_burn_transaction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.txin_token_migration.bitcoin_burn_transaction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_k_image;
        break;
      }

      // optional bytes k_image = 3;
      case 3: {
        if (tag == 26) {
         parse_k_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txin_token_migration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txin_token_migration)
  return false;
#undef DO_
}

void txin_token_migration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txin_token_migration)
  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token_amount(), output);
  }

  // optional string bitcoin_burn_transaction = 2;
  if (this->bitcoin_burn_transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bitcoin_burn_transaction().data(), this->bitcoin_burn_transaction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.txin_token_migration.bitcoin_burn_transaction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bitcoin_burn_transaction(), output);
  }

  // optional bytes k_image = 3;
  if (this->k_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->k_image(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txin_token_migration)
}

::google::protobuf::uint8* txin_token_migration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_token_migration)
  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token_amount(), target);
  }

  // optional string bitcoin_burn_transaction = 2;
  if (this->bitcoin_burn_transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bitcoin_burn_transaction().data(), this->bitcoin_burn_transaction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.txin_token_migration.bitcoin_burn_transaction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bitcoin_burn_transaction(), target);
  }

  // optional bytes k_image = 3;
  if (this->k_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->k_image(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_token_migration)
  return target;
}

int txin_token_migration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_token_migration)
  int total_size = 0;

  // optional uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token_amount());
  }

  // optional string bitcoin_burn_transaction = 2;
  if (this->bitcoin_burn_transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bitcoin_burn_transaction());
  }

  // optional bytes k_image = 3;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->k_image());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txin_token_migration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_token_migration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txin_token_migration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txin_token_migration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_token_migration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_token_migration)
    MergeFrom(*source);
  }
}

void txin_token_migration::MergeFrom(const txin_token_migration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_token_migration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.token_amount() != 0) {
    set_token_amount(from.token_amount());
  }
  if (from.bitcoin_burn_transaction().size() > 0) {

    bitcoin_burn_transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitcoin_burn_transaction_);
  }
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
}

void txin_token_migration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_token_migration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_token_migration::CopyFrom(const txin_token_migration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_token_migration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_token_migration::IsInitialized() const {

  return true;
}

void txin_token_migration::Swap(txin_token_migration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txin_token_migration::InternalSwap(txin_token_migration* other) {
  std::swap(token_amount_, other->token_amount_);
  bitcoin_burn_transaction_.Swap(&other->bitcoin_burn_transaction_);
  k_image_.Swap(&other->k_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txin_token_migration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txin_token_migration_descriptor_;
  metadata.reflection = txin_token_migration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_token_migration

// optional uint64 token_amount = 1;
void txin_token_migration::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txin_token_migration::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.token_amount)
  return token_amount_;
}
 void txin_token_migration::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.token_amount)
}

// optional string bitcoin_burn_transaction = 2;
void txin_token_migration::clear_bitcoin_burn_transaction() {
  bitcoin_burn_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txin_token_migration::bitcoin_burn_transaction() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.bitcoin_burn_transaction)
  return bitcoin_burn_transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_migration::set_bitcoin_burn_transaction(const ::std::string& value) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.bitcoin_burn_transaction)
}
 void txin_token_migration::set_bitcoin_burn_transaction(const char* value) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.bitcoin_burn_transaction)
}
 void txin_token_migration::set_bitcoin_burn_transaction(const char* value, size_t size) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.bitcoin_burn_transaction)
}
 ::std::string* txin_token_migration::mutable_bitcoin_burn_transaction() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.bitcoin_burn_transaction)
  return bitcoin_burn_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txin_token_migration::release_bitcoin_burn_transaction() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.bitcoin_burn_transaction)
  
  return bitcoin_burn_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_migration::set_allocated_bitcoin_burn_transaction(::std::string* bitcoin_burn_transaction) {
  if (bitcoin_burn_transaction != NULL) {
    
  } else {
    
  }
  bitcoin_burn_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitcoin_burn_transaction);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.bitcoin_burn_transaction)
}

// optional bytes k_image = 3;
void txin_token_migration::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txin_token_migration::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_migration::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.k_image)
}
 void txin_token_migration::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.k_image)
}
 void txin_token_migration::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.k_image)
}
 ::std::string* txin_token_migration::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txin_token_migration::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txin_token_migration::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.k_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txin_v::kTxinGenFieldNumber;
const int txin_v::kTxinToKeyFieldNumber;
const int txin_v::kTxinTokenToKeyFieldNumber;
const int txin_v::kTxinTokenMigrationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txin_v::txin_v()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_v)
}

void txin_v::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  txin_gen_ = const_cast< ::safex::txin_gen*>(&::safex::txin_gen::default_instance());
  txin_to_key_ = const_cast< ::safex::txin_to_key*>(&::safex::txin_to_key::default_instance());
  txin_token_to_key_ = const_cast< ::safex::txin_token_to_key*>(&::safex::txin_token_to_key::default_instance());
  txin_token_migration_ = const_cast< ::safex::txin_token_migration*>(&::safex::txin_token_migration::default_instance());
}

txin_v::txin_v(const txin_v& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txin_v)
}

void txin_v::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  txin_gen_ = NULL;
  txin_to_key_ = NULL;
  txin_token_to_key_ = NULL;
  txin_token_migration_ = NULL;
}

txin_v::~txin_v() {
  // @@protoc_insertion_point(destructor:safex.txin_v)
  SharedDtor();
}

void txin_v::SharedDtor() {
  if (this != default_instance_) {
    delete txin_gen_;
    delete txin_to_key_;
    delete txin_token_to_key_;
    delete txin_token_migration_;
  }
}

void txin_v::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txin_v::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txin_v_descriptor_;
}

const txin_v& txin_v::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txin_v* txin_v::default_instance_ = NULL;

txin_v* txin_v::New(::google::protobuf::Arena* arena) const {
  txin_v* n = new txin_v;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txin_v::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_v)
  if (GetArenaNoVirtual() == NULL && txin_gen_ != NULL) delete txin_gen_;
  txin_gen_ = NULL;
  if (GetArenaNoVirtual() == NULL && txin_to_key_ != NULL) delete txin_to_key_;
  txin_to_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && txin_token_to_key_ != NULL) delete txin_token_to_key_;
  txin_token_to_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && txin_token_migration_ != NULL) delete txin_token_migration_;
  txin_token_migration_ = NULL;
}

bool txin_v::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txin_v)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safex.txin_gen txin_gen = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txin_gen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txin_to_key;
        break;
      }

      // optional .safex.txin_to_key txin_to_key = 2;
      case 2: {
        if (tag == 18) {
         parse_txin_to_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txin_to_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txin_token_to_key;
        break;
      }

      // optional .safex.txin_token_to_key txin_token_to_key = 3;
      case 3: {
        if (tag == 26) {
         parse_txin_token_to_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txin_token_to_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_txin_token_migration;
        break;
      }

      // optional .safex.txin_token_migration txin_token_migration = 4;
      case 4: {
        if (tag == 34) {
         parse_txin_token_migration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txin_token_migration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txin_v)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txin_v)
  return false;
#undef DO_
}

void txin_v::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txin_v)
  // optional .safex.txin_gen txin_gen = 1;
  if (this->has_txin_gen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txin_gen_, output);
  }

  // optional .safex.txin_to_key txin_to_key = 2;
  if (this->has_txin_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->txin_to_key_, output);
  }

  // optional .safex.txin_token_to_key txin_token_to_key = 3;
  if (this->has_txin_token_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->txin_token_to_key_, output);
  }

  // optional .safex.txin_token_migration txin_token_migration = 4;
  if (this->has_txin_token_migration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->txin_token_migration_, output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txin_v)
}

::google::protobuf::uint8* txin_v::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_v)
  // optional .safex.txin_gen txin_gen = 1;
  if (this->has_txin_gen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txin_gen_, false, target);
  }

  // optional .safex.txin_to_key txin_to_key = 2;
  if (this->has_txin_to_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->txin_to_key_, false, target);
  }

  // optional .safex.txin_token_to_key txin_token_to_key = 3;
  if (this->has_txin_token_to_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->txin_token_to_key_, false, target);
  }

  // optional .safex.txin_token_migration txin_token_migration = 4;
  if (this->has_txin_token_migration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->txin_token_migration_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_v)
  return target;
}

int txin_v::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_v)
  int total_size = 0;

  // optional .safex.txin_gen txin_gen = 1;
  if (this->has_txin_gen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txin_gen_);
  }

  // optional .safex.txin_to_key txin_to_key = 2;
  if (this->has_txin_to_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txin_to_key_);
  }

  // optional .safex.txin_token_to_key txin_token_to_key = 3;
  if (this->has_txin_token_to_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txin_token_to_key_);
  }

  // optional .safex.txin_token_migration txin_token_migration = 4;
  if (this->has_txin_token_migration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txin_token_migration_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txin_v::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_v)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txin_v* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txin_v>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_v)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_v)
    MergeFrom(*source);
  }
}

void txin_v::MergeFrom(const txin_v& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_v)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_txin_gen()) {
    mutable_txin_gen()->::safex::txin_gen::MergeFrom(from.txin_gen());
  }
  if (from.has_txin_to_key()) {
    mutable_txin_to_key()->::safex::txin_to_key::MergeFrom(from.txin_to_key());
  }
  if (from.has_txin_token_to_key()) {
    mutable_txin_token_to_key()->::safex::txin_token_to_key::MergeFrom(from.txin_token_to_key());
  }
  if (from.has_txin_token_migration()) {
    mutable_txin_token_migration()->::safex::txin_token_migration::MergeFrom(from.txin_token_migration());
  }
}

void txin_v::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_v::CopyFrom(const txin_v& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_v::IsInitialized() const {

  return true;
}

void txin_v::Swap(txin_v* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txin_v::InternalSwap(txin_v* other) {
  std::swap(txin_gen_, other->txin_gen_);
  std::swap(txin_to_key_, other->txin_to_key_);
  std::swap(txin_token_to_key_, other->txin_token_to_key_);
  std::swap(txin_token_migration_, other->txin_token_migration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txin_v::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txin_v_descriptor_;
  metadata.reflection = txin_v_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_v

// optional .safex.txin_gen txin_gen = 1;
bool txin_v::has_txin_gen() const {
  return !_is_default_instance_ && txin_gen_ != NULL;
}
void txin_v::clear_txin_gen() {
  if (GetArenaNoVirtual() == NULL && txin_gen_ != NULL) delete txin_gen_;
  txin_gen_ = NULL;
}
const ::safex::txin_gen& txin_v::txin_gen() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_gen)
  return txin_gen_ != NULL ? *txin_gen_ : *default_instance_->txin_gen_;
}
::safex::txin_gen* txin_v::mutable_txin_gen() {
  
  if (txin_gen_ == NULL) {
    txin_gen_ = new ::safex::txin_gen;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_gen)
  return txin_gen_;
}
::safex::txin_gen* txin_v::release_txin_gen() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_gen)
  
  ::safex::txin_gen* temp = txin_gen_;
  txin_gen_ = NULL;
  return temp;
}
void txin_v::set_allocated_txin_gen(::safex::txin_gen* txin_gen) {
  delete txin_gen_;
  txin_gen_ = txin_gen;
  if (txin_gen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_gen)
}

// optional .safex.txin_to_key txin_to_key = 2;
bool txin_v::has_txin_to_key() const {
  return !_is_default_instance_ && txin_to_key_ != NULL;
}
void txin_v::clear_txin_to_key() {
  if (GetArenaNoVirtual() == NULL && txin_to_key_ != NULL) delete txin_to_key_;
  txin_to_key_ = NULL;
}
const ::safex::txin_to_key& txin_v::txin_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_to_key)
  return txin_to_key_ != NULL ? *txin_to_key_ : *default_instance_->txin_to_key_;
}
::safex::txin_to_key* txin_v::mutable_txin_to_key() {
  
  if (txin_to_key_ == NULL) {
    txin_to_key_ = new ::safex::txin_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_to_key)
  return txin_to_key_;
}
::safex::txin_to_key* txin_v::release_txin_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_to_key)
  
  ::safex::txin_to_key* temp = txin_to_key_;
  txin_to_key_ = NULL;
  return temp;
}
void txin_v::set_allocated_txin_to_key(::safex::txin_to_key* txin_to_key) {
  delete txin_to_key_;
  txin_to_key_ = txin_to_key;
  if (txin_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_to_key)
}

// optional .safex.txin_token_to_key txin_token_to_key = 3;
bool txin_v::has_txin_token_to_key() const {
  return !_is_default_instance_ && txin_token_to_key_ != NULL;
}
void txin_v::clear_txin_token_to_key() {
  if (GetArenaNoVirtual() == NULL && txin_token_to_key_ != NULL) delete txin_token_to_key_;
  txin_token_to_key_ = NULL;
}
const ::safex::txin_token_to_key& txin_v::txin_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_to_key)
  return txin_token_to_key_ != NULL ? *txin_token_to_key_ : *default_instance_->txin_token_to_key_;
}
::safex::txin_token_to_key* txin_v::mutable_txin_token_to_key() {
  
  if (txin_token_to_key_ == NULL) {
    txin_token_to_key_ = new ::safex::txin_token_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_to_key)
  return txin_token_to_key_;
}
::safex::txin_token_to_key* txin_v::release_txin_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_to_key)
  
  ::safex::txin_token_to_key* temp = txin_token_to_key_;
  txin_token_to_key_ = NULL;
  return temp;
}
void txin_v::set_allocated_txin_token_to_key(::safex::txin_token_to_key* txin_token_to_key) {
  delete txin_token_to_key_;
  txin_token_to_key_ = txin_token_to_key;
  if (txin_token_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_to_key)
}

// optional .safex.txin_token_migration txin_token_migration = 4;
bool txin_v::has_txin_token_migration() const {
  return !_is_default_instance_ && txin_token_migration_ != NULL;
}
void txin_v::clear_txin_token_migration() {
  if (GetArenaNoVirtual() == NULL && txin_token_migration_ != NULL) delete txin_token_migration_;
  txin_token_migration_ = NULL;
}
const ::safex::txin_token_migration& txin_v::txin_token_migration() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_migration)
  return txin_token_migration_ != NULL ? *txin_token_migration_ : *default_instance_->txin_token_migration_;
}
::safex::txin_token_migration* txin_v::mutable_txin_token_migration() {
  
  if (txin_token_migration_ == NULL) {
    txin_token_migration_ = new ::safex::txin_token_migration;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_migration)
  return txin_token_migration_;
}
::safex::txin_token_migration* txin_v::release_txin_token_migration() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_migration)
  
  ::safex::txin_token_migration* temp = txin_token_migration_;
  txin_token_migration_ = NULL;
  return temp;
}
void txin_v::set_allocated_txin_token_migration(::safex::txin_token_migration* txin_token_migration) {
  delete txin_token_migration_;
  txin_token_migration_ = txin_token_migration;
  if (txin_token_migration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_migration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txout_to_key::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txout_to_key::txout_to_key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_to_key)
}

void txout_to_key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txout_to_key::txout_to_key(const txout_to_key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txout_to_key)
}

void txout_to_key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

txout_to_key::~txout_to_key() {
  // @@protoc_insertion_point(destructor:safex.txout_to_key)
  SharedDtor();
}

void txout_to_key::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void txout_to_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txout_to_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txout_to_key_descriptor_;
}

const txout_to_key& txout_to_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txout_to_key* txout_to_key::default_instance_ = NULL;

txout_to_key* txout_to_key::New(::google::protobuf::Arena* arena) const {
  txout_to_key* n = new txout_to_key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txout_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_to_key)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool txout_to_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txout_to_key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txout_to_key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txout_to_key)
  return false;
#undef DO_
}

void txout_to_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txout_to_key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txout_to_key)
}

::google::protobuf::uint8* txout_to_key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_to_key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_to_key)
  return target;
}

int txout_to_key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_to_key)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txout_to_key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txout_to_key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txout_to_key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_to_key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_to_key)
    MergeFrom(*source);
  }
}

void txout_to_key::MergeFrom(const txout_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void txout_to_key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_to_key::CopyFrom(const txout_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_to_key::IsInitialized() const {

  return true;
}

void txout_to_key::Swap(txout_to_key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txout_to_key::InternalSwap(txout_to_key* other) {
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txout_to_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txout_to_key_descriptor_;
  metadata.reflection = txout_to_key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txout_to_key

// optional bytes key = 1;
void txout_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txout_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_to_key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txout_to_key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txout_to_key.key)
}
 void txout_to_key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_to_key.key)
}
 void txout_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_to_key.key)
}
 ::std::string* txout_to_key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:safex.txout_to_key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txout_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_to_key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txout_to_key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_to_key.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txout_token_to_key::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txout_token_to_key::txout_token_to_key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_token_to_key)
}

void txout_token_to_key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

txout_token_to_key::txout_token_to_key(const txout_token_to_key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txout_token_to_key)
}

void txout_token_to_key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

txout_token_to_key::~txout_token_to_key() {
  // @@protoc_insertion_point(destructor:safex.txout_token_to_key)
  SharedDtor();
}

void txout_token_to_key::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void txout_token_to_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txout_token_to_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txout_token_to_key_descriptor_;
}

const txout_token_to_key& txout_token_to_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txout_token_to_key* txout_token_to_key::default_instance_ = NULL;

txout_token_to_key* txout_token_to_key::New(::google::protobuf::Arena* arena) const {
  txout_token_to_key* n = new txout_token_to_key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txout_token_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_token_to_key)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool txout_token_to_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txout_token_to_key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txout_token_to_key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txout_token_to_key)
  return false;
#undef DO_
}

void txout_token_to_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txout_token_to_key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txout_token_to_key)
}

::google::protobuf::uint8* txout_token_to_key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_token_to_key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_token_to_key)
  return target;
}

int txout_token_to_key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_token_to_key)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txout_token_to_key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_token_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txout_token_to_key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txout_token_to_key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_token_to_key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_token_to_key)
    MergeFrom(*source);
  }
}

void txout_token_to_key::MergeFrom(const txout_token_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_token_to_key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void txout_token_to_key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_token_to_key::CopyFrom(const txout_token_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_token_to_key::IsInitialized() const {

  return true;
}

void txout_token_to_key::Swap(txout_token_to_key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txout_token_to_key::InternalSwap(txout_token_to_key* other) {
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txout_token_to_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txout_token_to_key_descriptor_;
  metadata.reflection = txout_token_to_key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txout_token_to_key

// optional bytes key = 1;
void txout_token_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& txout_token_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_token_to_key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txout_token_to_key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txout_token_to_key.key)
}
 void txout_token_to_key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_token_to_key.key)
}
 void txout_token_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_token_to_key.key)
}
 ::std::string* txout_token_to_key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:safex.txout_token_to_key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* txout_token_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_token_to_key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void txout_token_to_key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_token_to_key.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txout_target_v::kTxoutToKeyFieldNumber;
const int txout_target_v::kTxoutTokenToKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txout_target_v::txout_target_v()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_target_v)
}

void txout_target_v::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  txout_to_key_ = const_cast< ::safex::txout_to_key*>(&::safex::txout_to_key::default_instance());
  txout_token_to_key_ = const_cast< ::safex::txout_token_to_key*>(&::safex::txout_token_to_key::default_instance());
}

txout_target_v::txout_target_v(const txout_target_v& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txout_target_v)
}

void txout_target_v::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  txout_to_key_ = NULL;
  txout_token_to_key_ = NULL;
}

txout_target_v::~txout_target_v() {
  // @@protoc_insertion_point(destructor:safex.txout_target_v)
  SharedDtor();
}

void txout_target_v::SharedDtor() {
  if (this != default_instance_) {
    delete txout_to_key_;
    delete txout_token_to_key_;
  }
}

void txout_target_v::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txout_target_v::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txout_target_v_descriptor_;
}

const txout_target_v& txout_target_v::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txout_target_v* txout_target_v::default_instance_ = NULL;

txout_target_v* txout_target_v::New(::google::protobuf::Arena* arena) const {
  txout_target_v* n = new txout_target_v;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txout_target_v::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_target_v)
  if (GetArenaNoVirtual() == NULL && txout_to_key_ != NULL) delete txout_to_key_;
  txout_to_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && txout_token_to_key_ != NULL) delete txout_token_to_key_;
  txout_token_to_key_ = NULL;
}

bool txout_target_v::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txout_target_v)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safex.txout_to_key txout_to_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txout_to_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txout_token_to_key;
        break;
      }

      // optional .safex.txout_token_to_key txout_token_to_key = 2;
      case 2: {
        if (tag == 18) {
         parse_txout_token_to_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txout_token_to_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txout_target_v)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txout_target_v)
  return false;
#undef DO_
}

void txout_target_v::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txout_target_v)
  // optional .safex.txout_to_key txout_to_key = 1;
  if (this->has_txout_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txout_to_key_, output);
  }

  // optional .safex.txout_token_to_key txout_token_to_key = 2;
  if (this->has_txout_token_to_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->txout_token_to_key_, output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txout_target_v)
}

::google::protobuf::uint8* txout_target_v::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_target_v)
  // optional .safex.txout_to_key txout_to_key = 1;
  if (this->has_txout_to_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txout_to_key_, false, target);
  }

  // optional .safex.txout_token_to_key txout_token_to_key = 2;
  if (this->has_txout_token_to_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->txout_token_to_key_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_target_v)
  return target;
}

int txout_target_v::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_target_v)
  int total_size = 0;

  // optional .safex.txout_to_key txout_to_key = 1;
  if (this->has_txout_to_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txout_to_key_);
  }

  // optional .safex.txout_token_to_key txout_token_to_key = 2;
  if (this->has_txout_token_to_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txout_token_to_key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txout_target_v::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_target_v)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txout_target_v* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txout_target_v>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_target_v)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_target_v)
    MergeFrom(*source);
  }
}

void txout_target_v::MergeFrom(const txout_target_v& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_target_v)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_txout_to_key()) {
    mutable_txout_to_key()->::safex::txout_to_key::MergeFrom(from.txout_to_key());
  }
  if (from.has_txout_token_to_key()) {
    mutable_txout_token_to_key()->::safex::txout_token_to_key::MergeFrom(from.txout_token_to_key());
  }
}

void txout_target_v::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_target_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_target_v::CopyFrom(const txout_target_v& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_target_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_target_v::IsInitialized() const {

  return true;
}

void txout_target_v::Swap(txout_target_v* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txout_target_v::InternalSwap(txout_target_v* other) {
  std::swap(txout_to_key_, other->txout_to_key_);
  std::swap(txout_token_to_key_, other->txout_token_to_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txout_target_v::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txout_target_v_descriptor_;
  metadata.reflection = txout_target_v_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txout_target_v

// optional .safex.txout_to_key txout_to_key = 1;
bool txout_target_v::has_txout_to_key() const {
  return !_is_default_instance_ && txout_to_key_ != NULL;
}
void txout_target_v::clear_txout_to_key() {
  if (GetArenaNoVirtual() == NULL && txout_to_key_ != NULL) delete txout_to_key_;
  txout_to_key_ = NULL;
}
const ::safex::txout_to_key& txout_target_v::txout_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_to_key)
  return txout_to_key_ != NULL ? *txout_to_key_ : *default_instance_->txout_to_key_;
}
::safex::txout_to_key* txout_target_v::mutable_txout_to_key() {
  
  if (txout_to_key_ == NULL) {
    txout_to_key_ = new ::safex::txout_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_to_key)
  return txout_to_key_;
}
::safex::txout_to_key* txout_target_v::release_txout_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_to_key)
  
  ::safex::txout_to_key* temp = txout_to_key_;
  txout_to_key_ = NULL;
  return temp;
}
void txout_target_v::set_allocated_txout_to_key(::safex::txout_to_key* txout_to_key) {
  delete txout_to_key_;
  txout_to_key_ = txout_to_key;
  if (txout_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_to_key)
}

// optional .safex.txout_token_to_key txout_token_to_key = 2;
bool txout_target_v::has_txout_token_to_key() const {
  return !_is_default_instance_ && txout_token_to_key_ != NULL;
}
void txout_target_v::clear_txout_token_to_key() {
  if (GetArenaNoVirtual() == NULL && txout_token_to_key_ != NULL) delete txout_token_to_key_;
  txout_token_to_key_ = NULL;
}
const ::safex::txout_token_to_key& txout_target_v::txout_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_token_to_key)
  return txout_token_to_key_ != NULL ? *txout_token_to_key_ : *default_instance_->txout_token_to_key_;
}
::safex::txout_token_to_key* txout_target_v::mutable_txout_token_to_key() {
  
  if (txout_token_to_key_ == NULL) {
    txout_token_to_key_ = new ::safex::txout_token_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_token_to_key)
  return txout_token_to_key_;
}
::safex::txout_token_to_key* txout_target_v::release_txout_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_token_to_key)
  
  ::safex::txout_token_to_key* temp = txout_token_to_key_;
  txout_token_to_key_ = NULL;
  return temp;
}
void txout_target_v::set_allocated_txout_token_to_key(::safex::txout_token_to_key* txout_token_to_key) {
  delete txout_token_to_key_;
  txout_token_to_key_ = txout_token_to_key;
  if (txout_token_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_token_to_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int txout::kAmountFieldNumber;
const int txout::kTokenAmountFieldNumber;
const int txout::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

txout::txout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout)
}

void txout::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_ = const_cast< ::safex::txout_target_v*>(&::safex::txout_target_v::default_instance());
}

txout::txout(const txout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.txout)
}

void txout::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  token_amount_ = GOOGLE_ULONGLONG(0);
  target_ = NULL;
}

txout::~txout() {
  // @@protoc_insertion_point(destructor:safex.txout)
  SharedDtor();
}

void txout::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void txout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* txout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return txout_descriptor_;
}

const txout& txout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

txout* txout::default_instance_ = NULL;

txout* txout::New(::google::protobuf::Arena* arena) const {
  txout* n = new txout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void txout::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(txout, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<txout*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, token_amount_);
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool txout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.txout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token_amount;
        break;
      }

      // optional uint64 token_amount = 2;
      case 2: {
        if (tag == 16) {
         parse_token_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional .safex.txout_target_v target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.txout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.txout)
  return false;
#undef DO_
}

void txout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.txout)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional uint64 token_amount = 2;
  if (this->token_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token_amount(), output);
  }

  // optional .safex.txout_target_v target = 3;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->target_, output);
  }

  // @@protoc_insertion_point(serialize_end:safex.txout)
}

::google::protobuf::uint8* txout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional uint64 token_amount = 2;
  if (this->token_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token_amount(), target);
  }

  // optional .safex.txout_target_v target = 3;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->target_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.txout)
  return target;
}

int txout::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout)
  int total_size = 0;

  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // optional uint64 token_amount = 2;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token_amount());
  }

  // optional .safex.txout_target_v target = 3;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void txout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const txout* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const txout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout)
    MergeFrom(*source);
  }
}

void txout::MergeFrom(const txout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.token_amount() != 0) {
    set_token_amount(from.token_amount());
  }
  if (from.has_target()) {
    mutable_target()->::safex::txout_target_v::MergeFrom(from.target());
  }
}

void txout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout::CopyFrom(const txout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout::IsInitialized() const {

  return true;
}

void txout::Swap(txout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void txout::InternalSwap(txout* other) {
  std::swap(amount_, other->amount_);
  std::swap(token_amount_, other->token_amount_);
  std::swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata txout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = txout_descriptor_;
  metadata.reflection = txout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// txout

// optional uint64 amount = 1;
void txout::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txout::amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.amount)
  return amount_;
}
 void txout::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txout.amount)
}

// optional uint64 token_amount = 2;
void txout::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 txout::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.token_amount)
  return token_amount_;
}
 void txout::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txout.token_amount)
}

// optional .safex.txout_target_v target = 3;
bool txout::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
void txout::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::safex::txout_target_v& txout::target() const {
  // @@protoc_insertion_point(field_get:safex.txout.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
::safex::txout_target_v* txout::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::safex::txout_target_v;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout.target)
  return target_;
}
::safex::txout_target_v* txout::release_target() {
  // @@protoc_insertion_point(field_release:safex.txout.target)
  
  ::safex::txout_target_v* temp = target_;
  target_ = NULL;
  return temp;
}
void txout::set_allocated_target(::safex::txout_target_v* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigData::kRFieldNumber;
const int SigData::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigData::SigData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.SigData)
}

void SigData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SigData::SigData(const SigData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.SigData)
}

void SigData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SigData::~SigData() {
  // @@protoc_insertion_point(destructor:safex.SigData)
  SharedDtor();
}

void SigData::SharedDtor() {
  r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigData_descriptor_;
}

const SigData& SigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

SigData* SigData::default_instance_ = NULL;

SigData* SigData::New(::google::protobuf::Arena* arena) const {
  SigData* n = new SigData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigData::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.SigData)
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.SigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes r = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_c;
        break;
      }

      // optional bytes c = 2;
      case 2: {
        if (tag == 18) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.SigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.SigData)
  return false;
#undef DO_
}

void SigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.SigData)
  // optional bytes r = 1;
  if (this->r().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->r(), output);
  }

  // optional bytes c = 2;
  if (this->c().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.SigData)
}

::google::protobuf::uint8* SigData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.SigData)
  // optional bytes r = 1;
  if (this->r().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->r(), target);
  }

  // optional bytes c = 2;
  if (this->c().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.SigData)
  return target;
}

int SigData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.SigData)
  int total_size = 0;

  // optional bytes r = 1;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->r());
  }

  // optional bytes c = 2;
  if (this->c().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->c());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.SigData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SigData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SigData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.SigData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.SigData)
    MergeFrom(*source);
  }
}

void SigData::MergeFrom(const SigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.SigData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.c().size() > 0) {

    c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.c_);
  }
}

void SigData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.SigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigData::CopyFrom(const SigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.SigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigData::IsInitialized() const {

  return true;
}

void SigData::Swap(SigData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigData::InternalSwap(SigData* other) {
  r_.Swap(&other->r_);
  c_.Swap(&other->c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigData_descriptor_;
  metadata.reflection = SigData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigData

// optional bytes r = 1;
void SigData::clear_r() {
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SigData::r() const {
  // @@protoc_insertion_point(field_get:safex.SigData.r)
  return r_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SigData::set_r(const ::std::string& value) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.SigData.r)
}
 void SigData::set_r(const char* value) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.r)
}
 void SigData::set_r(const void* value, size_t size) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.r)
}
 ::std::string* SigData::mutable_r() {
  
  // @@protoc_insertion_point(field_mutable:safex.SigData.r)
  return r_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SigData::release_r() {
  // @@protoc_insertion_point(field_release:safex.SigData.r)
  
  return r_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SigData::set_allocated_r(::std::string* r) {
  if (r != NULL) {
    
  } else {
    
  }
  r_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), r);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.r)
}

// optional bytes c = 2;
void SigData::clear_c() {
  c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SigData::c() const {
  // @@protoc_insertion_point(field_get:safex.SigData.c)
  return c_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SigData::set_c(const ::std::string& value) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.SigData.c)
}
 void SigData::set_c(const char* value) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.c)
}
 void SigData::set_c(const void* value, size_t size) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.c)
}
 ::std::string* SigData::mutable_c() {
  
  // @@protoc_insertion_point(field_mutable:safex.SigData.c)
  return c_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SigData::release_c() {
  // @@protoc_insertion_point(field_release:safex.SigData.c)
  
  return c_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SigData::set_allocated_c(::std::string* c) {
  if (c != NULL) {
    
  } else {
    
  }
  c_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), c);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.c)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Signature)
}

void Signature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Signature)
}

void Signature::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:safex.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signature_descriptor_;
}

const Signature& Signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

Signature* Signature::default_instance_ = NULL;

Signature* Signature::New(::google::protobuf::Arena* arena) const {
  Signature* n = new Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Signature)
  signature_.Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .safex.SigData signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_signature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Signature)
  // repeated .safex.SigData signature = 1;
  for (unsigned int i = 0, n = this->signature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signature(i), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Signature)
  // repeated .safex.SigData signature = 1;
  for (unsigned int i = 0, n = this->signature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->signature(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Signature)
  return target;
}

int Signature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Signature)
  int total_size = 0;

  // repeated .safex.SigData signature = 1;
  total_size += 1 * this->signature_size();
  for (int i = 0; i < this->signature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signature(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Signature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Signature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Signature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  signature_.MergeFrom(from.signature_);
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {

  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  signature_.UnsafeArenaSwap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signature_descriptor_;
  metadata.reflection = Signature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// repeated .safex.SigData signature = 1;
int Signature::signature_size() const {
  return signature_.size();
}
void Signature::clear_signature() {
  signature_.Clear();
}
const ::safex::SigData& Signature::signature(int index) const {
  // @@protoc_insertion_point(field_get:safex.Signature.signature)
  return signature_.Get(index);
}
::safex::SigData* Signature::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Signature.signature)
  return signature_.Mutable(index);
}
::safex::SigData* Signature::add_signature() {
  // @@protoc_insertion_point(field_add:safex.Signature.signature)
  return signature_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::SigData >*
Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:safex.Signature.signature)
  return &signature_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::SigData >&
Signature::signature() const {
  // @@protoc_insertion_point(field_list:safex.Signature.signature)
  return signature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kVersionFieldNumber;
const int Transaction::kUnlockTimeFieldNumber;
const int Transaction::kExtraFieldNumber;
const int Transaction::kVinFieldNumber;
const int Transaction::kVoutFieldNumber;
const int Transaction::kSignaturesFieldNumber;
const int Transaction::kBlockHeightFieldNumber;
const int Transaction::kBlockTimestampFieldNumber;
const int Transaction::kDoubleSpendSeenFieldNumber;
const int Transaction::kInPoolFieldNumber;
const int Transaction::kOutputIndicesFieldNumber;
const int Transaction::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Transaction)
}

void Transaction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  unlock_time_ = GOOGLE_ULONGLONG(0);
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_height_ = GOOGLE_ULONGLONG(0);
  block_timestamp_ = GOOGLE_ULONGLONG(0);
  double_spend_seen_ = false;
  in_pool_ = false;
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:safex.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Transaction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Transaction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transaction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, unlock_time_);
  ZR_(block_height_, block_timestamp_);
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(double_spend_seen_, in_pool_);
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  vin_.Clear();
  vout_.Clear();
  signatures_.Clear();
  output_indices_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlock_time;
        break;
      }

      // optional uint64 unlock_time = 2;
      case 2: {
        if (tag == 16) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlock_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra;
        break;
      }

      // optional bytes extra = 3;
      case 3: {
        if (tag == 26) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vin;
        break;
      }

      // repeated .safex.txin_v vin = 4;
      case 4: {
        if (tag == 34) {
         parse_vin:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_vin;
        if (input->ExpectTag(42)) goto parse_loop_vout;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .safex.txout vout = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_vout;
        if (input->ExpectTag(50)) goto parse_loop_signatures;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .safex.Signature signatures = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_signatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_signatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_block_height;
        break;
      }

      // optional uint64 block_height = 7;
      case 7: {
        if (tag == 56) {
         parse_block_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_block_timestamp;
        break;
      }

      // optional uint64 block_timestamp = 8;
      case 8: {
        if (tag == 64) {
         parse_block_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_double_spend_seen;
        break;
      }

      // optional bool double_spend_seen = 9;
      case 9: {
        if (tag == 72) {
         parse_double_spend_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_spend_seen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_in_pool;
        break;
      }

      // optional bool in_pool = 10;
      case 10: {
        if (tag == 80) {
         parse_in_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_pool_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_output_indices;
        break;
      }

      // repeated uint64 output_indices = 11;
      case 11: {
        if (tag == 90) {
         parse_output_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_output_indices())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 90, input, this->mutable_output_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_tx_hash;
        break;
      }

      // optional string tx_hash = 12;
      case 12: {
        if (tag == 98) {
         parse_tx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Transaction.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Transaction)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional uint64 unlock_time = 2;
  if (this->unlock_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unlock_time(), output);
  }

  // optional bytes extra = 3;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extra(), output);
  }

  // repeated .safex.txin_v vin = 4;
  for (unsigned int i = 0, n = this->vin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vin(i), output);
  }

  // repeated .safex.txout vout = 5;
  for (unsigned int i = 0, n = this->vout_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vout(i), output);
  }

  // repeated .safex.Signature signatures = 6;
  for (unsigned int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->signatures(i), output);
  }

  // optional uint64 block_height = 7;
  if (this->block_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->block_height(), output);
  }

  // optional uint64 block_timestamp = 8;
  if (this->block_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->block_timestamp(), output);
  }

  // optional bool double_spend_seen = 9;
  if (this->double_spend_seen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->double_spend_seen(), output);
  }

  // optional bool in_pool = 10;
  if (this->in_pool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->in_pool(), output);
  }

  // repeated uint64 output_indices = 11;
  if (this->output_indices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_indices_cached_byte_size_);
  }
  for (int i = 0; i < this->output_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->output_indices(i), output);
  }

  // optional string tx_hash = 12;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Transaction.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->tx_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Transaction)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional uint64 unlock_time = 2;
  if (this->unlock_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unlock_time(), target);
  }

  // optional bytes extra = 3;
  if (this->extra().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra(), target);
  }

  // repeated .safex.txin_v vin = 4;
  for (unsigned int i = 0, n = this->vin_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vin(i), false, target);
  }

  // repeated .safex.txout vout = 5;
  for (unsigned int i = 0, n = this->vout_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->vout(i), false, target);
  }

  // repeated .safex.Signature signatures = 6;
  for (unsigned int i = 0, n = this->signatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->signatures(i), false, target);
  }

  // optional uint64 block_height = 7;
  if (this->block_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->block_height(), target);
  }

  // optional uint64 block_timestamp = 8;
  if (this->block_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->block_timestamp(), target);
  }

  // optional bool double_spend_seen = 9;
  if (this->double_spend_seen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->double_spend_seen(), target);
  }

  // optional bool in_pool = 10;
  if (this->in_pool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->in_pool(), target);
  }

  // repeated uint64 output_indices = 11;
  if (this->output_indices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_indices_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->output_indices(i), target);
  }

  // optional string tx_hash = 12;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Transaction.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tx_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Transaction)
  return target;
}

int Transaction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Transaction)
  int total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional uint64 unlock_time = 2;
  if (this->unlock_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unlock_time());
  }

  // optional bytes extra = 3;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extra());
  }

  // optional uint64 block_height = 7;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block_height());
  }

  // optional uint64 block_timestamp = 8;
  if (this->block_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block_timestamp());
  }

  // optional bool double_spend_seen = 9;
  if (this->double_spend_seen() != 0) {
    total_size += 1 + 1;
  }

  // optional bool in_pool = 10;
  if (this->in_pool() != 0) {
    total_size += 1 + 1;
  }

  // optional string tx_hash = 12;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  // repeated .safex.txin_v vin = 4;
  total_size += 1 * this->vin_size();
  for (int i = 0; i < this->vin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vin(i));
  }

  // repeated .safex.txout vout = 5;
  total_size += 1 * this->vout_size();
  for (int i = 0; i < this->vout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vout(i));
  }

  // repeated .safex.Signature signatures = 6;
  total_size += 1 * this->signatures_size();
  for (int i = 0; i < this->signatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signatures(i));
  }

  // repeated uint64 output_indices = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->output_indices(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_indices_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vin_.MergeFrom(from.vin_);
  vout_.MergeFrom(from.vout_);
  signatures_.MergeFrom(from.signatures_);
  output_indices_.MergeFrom(from.output_indices_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.unlock_time() != 0) {
    set_unlock_time(from.unlock_time());
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.block_height() != 0) {
    set_block_height(from.block_height());
  }
  if (from.block_timestamp() != 0) {
    set_block_timestamp(from.block_timestamp());
  }
  if (from.double_spend_seen() != 0) {
    set_double_spend_seen(from.double_spend_seen());
  }
  if (from.in_pool() != 0) {
    set_in_pool(from.in_pool());
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  std::swap(version_, other->version_);
  std::swap(unlock_time_, other->unlock_time_);
  extra_.Swap(&other->extra_);
  vin_.UnsafeArenaSwap(&other->vin_);
  vout_.UnsafeArenaSwap(&other->vout_);
  signatures_.UnsafeArenaSwap(&other->signatures_);
  std::swap(block_height_, other->block_height_);
  std::swap(block_timestamp_, other->block_timestamp_);
  std::swap(double_spend_seen_, other->double_spend_seen_);
  std::swap(in_pool_, other->in_pool_);
  output_indices_.UnsafeArenaSwap(&other->output_indices_);
  tx_hash_.Swap(&other->tx_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// optional uint64 version = 1;
void Transaction::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Transaction::version() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.version)
  return version_;
}
 void Transaction::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.version)
}

// optional uint64 unlock_time = 2;
void Transaction::clear_unlock_time() {
  unlock_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Transaction::unlock_time() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.unlock_time)
  return unlock_time_;
}
 void Transaction::set_unlock_time(::google::protobuf::uint64 value) {
  
  unlock_time_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.unlock_time)
}

// optional bytes extra = 3;
void Transaction::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::extra() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.extra)
  return extra_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Transaction.extra)
}
 void Transaction::set_extra(const char* value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.extra)
}
 void Transaction::set_extra(const void* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.extra)
}
 ::std::string* Transaction::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:safex.Transaction.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_extra() {
  // @@protoc_insertion_point(field_release:safex.Transaction.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.extra)
}

// repeated .safex.txin_v vin = 4;
int Transaction::vin_size() const {
  return vin_.size();
}
void Transaction::clear_vin() {
  vin_.Clear();
}
const ::safex::txin_v& Transaction::vin(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vin)
  return vin_.Get(index);
}
::safex::txin_v* Transaction::mutable_vin(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vin)
  return vin_.Mutable(index);
}
::safex::txin_v* Transaction::add_vin() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vin)
  return vin_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::txin_v >*
Transaction::mutable_vin() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vin)
  return &vin_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::txin_v >&
Transaction::vin() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vin)
  return vin_;
}

// repeated .safex.txout vout = 5;
int Transaction::vout_size() const {
  return vout_.size();
}
void Transaction::clear_vout() {
  vout_.Clear();
}
const ::safex::txout& Transaction::vout(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vout)
  return vout_.Get(index);
}
::safex::txout* Transaction::mutable_vout(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vout)
  return vout_.Mutable(index);
}
::safex::txout* Transaction::add_vout() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vout)
  return vout_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::txout >*
Transaction::mutable_vout() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vout)
  return &vout_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::txout >&
Transaction::vout() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vout)
  return vout_;
}

// repeated .safex.Signature signatures = 6;
int Transaction::signatures_size() const {
  return signatures_.size();
}
void Transaction::clear_signatures() {
  signatures_.Clear();
}
const ::safex::Signature& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.signatures)
  return signatures_.Get(index);
}
::safex::Signature* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.signatures)
  return signatures_.Mutable(index);
}
::safex::Signature* Transaction::add_signatures() {
  // @@protoc_insertion_point(field_add:safex.Transaction.signatures)
  return signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::Signature >*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.signatures)
  return &signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::Signature >&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.signatures)
  return signatures_;
}

// optional uint64 block_height = 7;
void Transaction::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Transaction::block_height() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_height)
  return block_height_;
}
 void Transaction::set_block_height(::google::protobuf::uint64 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.block_height)
}

// optional uint64 block_timestamp = 8;
void Transaction::clear_block_timestamp() {
  block_timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Transaction::block_timestamp() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_timestamp)
  return block_timestamp_;
}
 void Transaction::set_block_timestamp(::google::protobuf::uint64 value) {
  
  block_timestamp_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.block_timestamp)
}

// optional bool double_spend_seen = 9;
void Transaction::clear_double_spend_seen() {
  double_spend_seen_ = false;
}
 bool Transaction::double_spend_seen() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.double_spend_seen)
  return double_spend_seen_;
}
 void Transaction::set_double_spend_seen(bool value) {
  
  double_spend_seen_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.double_spend_seen)
}

// optional bool in_pool = 10;
void Transaction::clear_in_pool() {
  in_pool_ = false;
}
 bool Transaction::in_pool() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.in_pool)
  return in_pool_;
}
 void Transaction::set_in_pool(bool value) {
  
  in_pool_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.in_pool)
}

// repeated uint64 output_indices = 11;
int Transaction::output_indices_size() const {
  return output_indices_.size();
}
void Transaction::clear_output_indices() {
  output_indices_.Clear();
}
 ::google::protobuf::uint64 Transaction::output_indices(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.output_indices)
  return output_indices_.Get(index);
}
 void Transaction::set_output_indices(int index, ::google::protobuf::uint64 value) {
  output_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.Transaction.output_indices)
}
 void Transaction::add_output_indices(::google::protobuf::uint64 value) {
  output_indices_.Add(value);
  // @@protoc_insertion_point(field_add:safex.Transaction.output_indices)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Transaction::output_indices() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.output_indices)
  return output_indices_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Transaction::mutable_output_indices() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.output_indices)
  return &output_indices_;
}

// optional string tx_hash = 12;
void Transaction::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::tx_hash() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Transaction.tx_hash)
}
 void Transaction::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.tx_hash)
}
 void Transaction::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.tx_hash)
}
 ::std::string* Transaction::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.Transaction.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_tx_hash() {
  // @@protoc_insertion_point(field_release:safex.Transaction.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.tx_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transactions::kTxFieldNumber;
const int Transactions::kMissedTxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transactions::Transactions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Transactions)
}

void Transactions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Transactions::Transactions(const Transactions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:safex.Transactions)
}

void Transactions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Transactions::~Transactions() {
  // @@protoc_insertion_point(destructor:safex.Transactions)
  SharedDtor();
}

void Transactions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transactions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transactions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transactions_descriptor_;
}

const Transactions& Transactions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactions_2eproto();
  return *default_instance_;
}

Transactions* Transactions::default_instance_ = NULL;

Transactions* Transactions::New(::google::protobuf::Arena* arena) const {
  Transactions* n = new Transactions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transactions::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Transactions)
  tx_.Clear();
  missed_txs_.Clear();
}

bool Transactions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safex.Transactions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .safex.Transaction tx = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tx;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_missed_txs;
        break;
      }

      // repeated string missed_txs = 2;
      case 2: {
        if (tag == 18) {
         parse_missed_txs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_missed_txs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->missed_txs(this->missed_txs_size() - 1).data(),
            this->missed_txs(this->missed_txs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safex.Transactions.missed_txs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_missed_txs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safex.Transactions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safex.Transactions)
  return false;
#undef DO_
}

void Transactions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safex.Transactions)
  // repeated .safex.Transaction tx = 1;
  for (unsigned int i = 0, n = this->tx_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tx(i), output);
  }

  // repeated string missed_txs = 2;
  for (int i = 0; i < this->missed_txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missed_txs(i).data(), this->missed_txs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Transactions.missed_txs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->missed_txs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:safex.Transactions)
}

::google::protobuf::uint8* Transactions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Transactions)
  // repeated .safex.Transaction tx = 1;
  for (unsigned int i = 0, n = this->tx_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tx(i), false, target);
  }

  // repeated string missed_txs = 2;
  for (int i = 0; i < this->missed_txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missed_txs(i).data(), this->missed_txs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safex.Transactions.missed_txs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->missed_txs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:safex.Transactions)
  return target;
}

int Transactions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Transactions)
  int total_size = 0;

  // repeated .safex.Transaction tx = 1;
  total_size += 1 * this->tx_size();
  for (int i = 0; i < this->tx_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tx(i));
  }

  // repeated string missed_txs = 2;
  total_size += 1 * this->missed_txs_size();
  for (int i = 0; i < this->missed_txs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->missed_txs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transactions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Transactions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transactions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transactions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Transactions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Transactions)
    MergeFrom(*source);
  }
}

void Transactions::MergeFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Transactions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tx_.MergeFrom(from.tx_);
  missed_txs_.MergeFrom(from.missed_txs_);
}

void Transactions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transactions::CopyFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transactions::IsInitialized() const {

  return true;
}

void Transactions::Swap(Transactions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transactions::InternalSwap(Transactions* other) {
  tx_.UnsafeArenaSwap(&other->tx_);
  missed_txs_.UnsafeArenaSwap(&other->missed_txs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transactions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transactions_descriptor_;
  metadata.reflection = Transactions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transactions

// repeated .safex.Transaction tx = 1;
int Transactions::tx_size() const {
  return tx_.size();
}
void Transactions::clear_tx() {
  tx_.Clear();
}
const ::safex::Transaction& Transactions::tx(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.tx)
  return tx_.Get(index);
}
::safex::Transaction* Transactions::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.tx)
  return tx_.Mutable(index);
}
::safex::Transaction* Transactions::add_tx() {
  // @@protoc_insertion_point(field_add:safex.Transactions.tx)
  return tx_.Add();
}
::google::protobuf::RepeatedPtrField< ::safex::Transaction >*
Transactions::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.tx)
  return &tx_;
}
const ::google::protobuf::RepeatedPtrField< ::safex::Transaction >&
Transactions::tx() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.tx)
  return tx_;
}

// repeated string missed_txs = 2;
int Transactions::missed_txs_size() const {
  return missed_txs_.size();
}
void Transactions::clear_missed_txs() {
  missed_txs_.Clear();
}
 const ::std::string& Transactions::missed_txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.missed_txs)
  return missed_txs_.Get(index);
}
 ::std::string* Transactions::mutable_missed_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.missed_txs)
  return missed_txs_.Mutable(index);
}
 void Transactions::set_missed_txs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:safex.Transactions.missed_txs)
  missed_txs_.Mutable(index)->assign(value);
}
 void Transactions::set_missed_txs(int index, const char* value) {
  missed_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safex.Transactions.missed_txs)
}
 void Transactions::set_missed_txs(int index, const char* value, size_t size) {
  missed_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safex.Transactions.missed_txs)
}
 ::std::string* Transactions::add_missed_txs() {
  // @@protoc_insertion_point(field_add_mutable:safex.Transactions.missed_txs)
  return missed_txs_.Add();
}
 void Transactions::add_missed_txs(const ::std::string& value) {
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safex.Transactions.missed_txs)
}
 void Transactions::add_missed_txs(const char* value) {
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safex.Transactions.missed_txs)
}
 void Transactions::add_missed_txs(const char* value, size_t size) {
  missed_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safex.Transactions.missed_txs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Transactions::missed_txs() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.missed_txs)
  return missed_txs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Transactions::mutable_missed_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.missed_txs)
  return &missed_txs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)
