// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#ifndef PROTOBUF_transactions_2eproto__INCLUDED
#define PROTOBUF_transactions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace safex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transactions_2eproto();
void protobuf_AssignDesc_transactions_2eproto();
void protobuf_ShutdownFile_transactions_2eproto();

class SigData;
class Signature;
class Transaction;
class Transactions;
class txin_gen;
class txin_to_key;
class txin_token_migration;
class txin_token_to_key;
class txin_v;
class txout;
class txout_target_v;
class txout_to_key;
class txout_token_to_key;

// ===================================================================

class txin_gen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txin_gen) */ {
 public:
  txin_gen();
  virtual ~txin_gen();

  txin_gen(const txin_gen& from);

  inline txin_gen& operator=(const txin_gen& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txin_gen& default_instance();

  void Swap(txin_gen* other);

  // implements Message ----------------------------------------------

  inline txin_gen* New() const { return New(NULL); }

  txin_gen* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txin_gen& from);
  void MergeFrom(const txin_gen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txin_gen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:safex.txin_gen)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txin_gen* default_instance_;
};
// -------------------------------------------------------------------

class txin_to_key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txin_to_key) */ {
 public:
  txin_to_key();
  virtual ~txin_to_key();

  txin_to_key(const txin_to_key& from);

  inline txin_to_key& operator=(const txin_to_key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txin_to_key& default_instance();

  void Swap(txin_to_key* other);

  // implements Message ----------------------------------------------

  inline txin_to_key* New() const { return New(NULL); }

  txin_to_key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txin_to_key& from);
  void MergeFrom(const txin_to_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txin_to_key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional bytes k_image = 2;
  void clear_k_image();
  static const int kKImageFieldNumber = 2;
  const ::std::string& k_image() const;
  void set_k_image(const ::std::string& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  ::std::string* mutable_k_image();
  ::std::string* release_k_image();
  void set_allocated_k_image(::std::string* k_image);

  // repeated uint64 key_offsets = 3;
  int key_offsets_size() const;
  void clear_key_offsets();
  static const int kKeyOffsetsFieldNumber = 3;
  ::google::protobuf::uint64 key_offsets(int index) const;
  void set_key_offsets(int index, ::google::protobuf::uint64 value);
  void add_key_offsets(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      key_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_key_offsets();

  // @@protoc_insertion_point(class_scope:safex.txin_to_key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::internal::ArenaStringPtr k_image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > key_offsets_;
  mutable int _key_offsets_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txin_to_key* default_instance_;
};
// -------------------------------------------------------------------

class txin_token_to_key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txin_token_to_key) */ {
 public:
  txin_token_to_key();
  virtual ~txin_token_to_key();

  txin_token_to_key(const txin_token_to_key& from);

  inline txin_token_to_key& operator=(const txin_token_to_key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txin_token_to_key& default_instance();

  void Swap(txin_token_to_key* other);

  // implements Message ----------------------------------------------

  inline txin_token_to_key* New() const { return New(NULL); }

  txin_token_to_key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txin_token_to_key& from);
  void MergeFrom(const txin_token_to_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txin_token_to_key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 token_amount = 1;
  void clear_token_amount();
  static const int kTokenAmountFieldNumber = 1;
  ::google::protobuf::uint64 token_amount() const;
  void set_token_amount(::google::protobuf::uint64 value);

  // optional bytes k_image = 2;
  void clear_k_image();
  static const int kKImageFieldNumber = 2;
  const ::std::string& k_image() const;
  void set_k_image(const ::std::string& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  ::std::string* mutable_k_image();
  ::std::string* release_k_image();
  void set_allocated_k_image(::std::string* k_image);

  // repeated uint64 key_offsets = 3;
  int key_offsets_size() const;
  void clear_key_offsets();
  static const int kKeyOffsetsFieldNumber = 3;
  ::google::protobuf::uint64 key_offsets(int index) const;
  void set_key_offsets(int index, ::google::protobuf::uint64 value);
  void add_key_offsets(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      key_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_key_offsets();

  // @@protoc_insertion_point(class_scope:safex.txin_token_to_key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 token_amount_;
  ::google::protobuf::internal::ArenaStringPtr k_image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > key_offsets_;
  mutable int _key_offsets_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txin_token_to_key* default_instance_;
};
// -------------------------------------------------------------------

class txin_token_migration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txin_token_migration) */ {
 public:
  txin_token_migration();
  virtual ~txin_token_migration();

  txin_token_migration(const txin_token_migration& from);

  inline txin_token_migration& operator=(const txin_token_migration& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txin_token_migration& default_instance();

  void Swap(txin_token_migration* other);

  // implements Message ----------------------------------------------

  inline txin_token_migration* New() const { return New(NULL); }

  txin_token_migration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txin_token_migration& from);
  void MergeFrom(const txin_token_migration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txin_token_migration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 token_amount = 1;
  void clear_token_amount();
  static const int kTokenAmountFieldNumber = 1;
  ::google::protobuf::uint64 token_amount() const;
  void set_token_amount(::google::protobuf::uint64 value);

  // optional string bitcoin_burn_transaction = 2;
  void clear_bitcoin_burn_transaction();
  static const int kBitcoinBurnTransactionFieldNumber = 2;
  const ::std::string& bitcoin_burn_transaction() const;
  void set_bitcoin_burn_transaction(const ::std::string& value);
  void set_bitcoin_burn_transaction(const char* value);
  void set_bitcoin_burn_transaction(const char* value, size_t size);
  ::std::string* mutable_bitcoin_burn_transaction();
  ::std::string* release_bitcoin_burn_transaction();
  void set_allocated_bitcoin_burn_transaction(::std::string* bitcoin_burn_transaction);

  // optional bytes k_image = 3;
  void clear_k_image();
  static const int kKImageFieldNumber = 3;
  const ::std::string& k_image() const;
  void set_k_image(const ::std::string& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  ::std::string* mutable_k_image();
  ::std::string* release_k_image();
  void set_allocated_k_image(::std::string* k_image);

  // @@protoc_insertion_point(class_scope:safex.txin_token_migration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 token_amount_;
  ::google::protobuf::internal::ArenaStringPtr bitcoin_burn_transaction_;
  ::google::protobuf::internal::ArenaStringPtr k_image_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txin_token_migration* default_instance_;
};
// -------------------------------------------------------------------

class txin_v : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txin_v) */ {
 public:
  txin_v();
  virtual ~txin_v();

  txin_v(const txin_v& from);

  inline txin_v& operator=(const txin_v& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txin_v& default_instance();

  void Swap(txin_v* other);

  // implements Message ----------------------------------------------

  inline txin_v* New() const { return New(NULL); }

  txin_v* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txin_v& from);
  void MergeFrom(const txin_v& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txin_v* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .safex.txin_gen txin_gen = 1;
  bool has_txin_gen() const;
  void clear_txin_gen();
  static const int kTxinGenFieldNumber = 1;
  const ::safex::txin_gen& txin_gen() const;
  ::safex::txin_gen* mutable_txin_gen();
  ::safex::txin_gen* release_txin_gen();
  void set_allocated_txin_gen(::safex::txin_gen* txin_gen);

  // optional .safex.txin_to_key txin_to_key = 2;
  bool has_txin_to_key() const;
  void clear_txin_to_key();
  static const int kTxinToKeyFieldNumber = 2;
  const ::safex::txin_to_key& txin_to_key() const;
  ::safex::txin_to_key* mutable_txin_to_key();
  ::safex::txin_to_key* release_txin_to_key();
  void set_allocated_txin_to_key(::safex::txin_to_key* txin_to_key);

  // optional .safex.txin_token_to_key txin_token_to_key = 3;
  bool has_txin_token_to_key() const;
  void clear_txin_token_to_key();
  static const int kTxinTokenToKeyFieldNumber = 3;
  const ::safex::txin_token_to_key& txin_token_to_key() const;
  ::safex::txin_token_to_key* mutable_txin_token_to_key();
  ::safex::txin_token_to_key* release_txin_token_to_key();
  void set_allocated_txin_token_to_key(::safex::txin_token_to_key* txin_token_to_key);

  // optional .safex.txin_token_migration txin_token_migration = 4;
  bool has_txin_token_migration() const;
  void clear_txin_token_migration();
  static const int kTxinTokenMigrationFieldNumber = 4;
  const ::safex::txin_token_migration& txin_token_migration() const;
  ::safex::txin_token_migration* mutable_txin_token_migration();
  ::safex::txin_token_migration* release_txin_token_migration();
  void set_allocated_txin_token_migration(::safex::txin_token_migration* txin_token_migration);

  // @@protoc_insertion_point(class_scope:safex.txin_v)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::safex::txin_gen* txin_gen_;
  ::safex::txin_to_key* txin_to_key_;
  ::safex::txin_token_to_key* txin_token_to_key_;
  ::safex::txin_token_migration* txin_token_migration_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txin_v* default_instance_;
};
// -------------------------------------------------------------------

class txout_to_key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txout_to_key) */ {
 public:
  txout_to_key();
  virtual ~txout_to_key();

  txout_to_key(const txout_to_key& from);

  inline txout_to_key& operator=(const txout_to_key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txout_to_key& default_instance();

  void Swap(txout_to_key* other);

  // implements Message ----------------------------------------------

  inline txout_to_key* New() const { return New(NULL); }

  txout_to_key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txout_to_key& from);
  void MergeFrom(const txout_to_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txout_to_key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:safex.txout_to_key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txout_to_key* default_instance_;
};
// -------------------------------------------------------------------

class txout_token_to_key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txout_token_to_key) */ {
 public:
  txout_token_to_key();
  virtual ~txout_token_to_key();

  txout_token_to_key(const txout_token_to_key& from);

  inline txout_token_to_key& operator=(const txout_token_to_key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txout_token_to_key& default_instance();

  void Swap(txout_token_to_key* other);

  // implements Message ----------------------------------------------

  inline txout_token_to_key* New() const { return New(NULL); }

  txout_token_to_key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txout_token_to_key& from);
  void MergeFrom(const txout_token_to_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txout_token_to_key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:safex.txout_token_to_key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txout_token_to_key* default_instance_;
};
// -------------------------------------------------------------------

class txout_target_v : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txout_target_v) */ {
 public:
  txout_target_v();
  virtual ~txout_target_v();

  txout_target_v(const txout_target_v& from);

  inline txout_target_v& operator=(const txout_target_v& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txout_target_v& default_instance();

  void Swap(txout_target_v* other);

  // implements Message ----------------------------------------------

  inline txout_target_v* New() const { return New(NULL); }

  txout_target_v* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txout_target_v& from);
  void MergeFrom(const txout_target_v& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txout_target_v* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .safex.txout_to_key txout_to_key = 1;
  bool has_txout_to_key() const;
  void clear_txout_to_key();
  static const int kTxoutToKeyFieldNumber = 1;
  const ::safex::txout_to_key& txout_to_key() const;
  ::safex::txout_to_key* mutable_txout_to_key();
  ::safex::txout_to_key* release_txout_to_key();
  void set_allocated_txout_to_key(::safex::txout_to_key* txout_to_key);

  // optional .safex.txout_token_to_key txout_token_to_key = 2;
  bool has_txout_token_to_key() const;
  void clear_txout_token_to_key();
  static const int kTxoutTokenToKeyFieldNumber = 2;
  const ::safex::txout_token_to_key& txout_token_to_key() const;
  ::safex::txout_token_to_key* mutable_txout_token_to_key();
  ::safex::txout_token_to_key* release_txout_token_to_key();
  void set_allocated_txout_token_to_key(::safex::txout_token_to_key* txout_token_to_key);

  // @@protoc_insertion_point(class_scope:safex.txout_target_v)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::safex::txout_to_key* txout_to_key_;
  ::safex::txout_token_to_key* txout_token_to_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txout_target_v* default_instance_;
};
// -------------------------------------------------------------------

class txout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.txout) */ {
 public:
  txout();
  virtual ~txout();

  txout(const txout& from);

  inline txout& operator=(const txout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const txout& default_instance();

  void Swap(txout* other);

  // implements Message ----------------------------------------------

  inline txout* New() const { return New(NULL); }

  txout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const txout& from);
  void MergeFrom(const txout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(txout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 token_amount = 2;
  void clear_token_amount();
  static const int kTokenAmountFieldNumber = 2;
  ::google::protobuf::uint64 token_amount() const;
  void set_token_amount(::google::protobuf::uint64 value);

  // optional .safex.txout_target_v target = 3;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  const ::safex::txout_target_v& target() const;
  ::safex::txout_target_v* mutable_target();
  ::safex::txout_target_v* release_target();
  void set_allocated_target(::safex::txout_target_v* target);

  // @@protoc_insertion_point(class_scope:safex.txout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 token_amount_;
  ::safex::txout_target_v* target_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static txout* default_instance_;
};
// -------------------------------------------------------------------

class SigData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.SigData) */ {
 public:
  SigData();
  virtual ~SigData();

  SigData(const SigData& from);

  inline SigData& operator=(const SigData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigData& default_instance();

  void Swap(SigData* other);

  // implements Message ----------------------------------------------

  inline SigData* New() const { return New(NULL); }

  SigData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigData& from);
  void MergeFrom(const SigData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SigData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  const ::std::string& r() const;
  void set_r(const ::std::string& value);
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  ::std::string* mutable_r();
  ::std::string* release_r();
  void set_allocated_r(::std::string* r);

  // optional bytes c = 2;
  void clear_c();
  static const int kCFieldNumber = 2;
  const ::std::string& c() const;
  void set_c(const ::std::string& value);
  void set_c(const char* value);
  void set_c(const void* value, size_t size);
  ::std::string* mutable_c();
  ::std::string* release_c();
  void set_allocated_c(::std::string* c);

  // @@protoc_insertion_point(class_scope:safex.SigData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr r_;
  ::google::protobuf::internal::ArenaStringPtr c_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static SigData* default_instance_;
};
// -------------------------------------------------------------------

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  void Swap(Signature* other);

  // implements Message ----------------------------------------------

  inline Signature* New() const { return New(NULL); }

  Signature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .safex.SigData signature = 1;
  int signature_size() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::safex::SigData& signature(int index) const;
  ::safex::SigData* mutable_signature(int index);
  ::safex::SigData* add_signature();
  ::google::protobuf::RepeatedPtrField< ::safex::SigData >*
      mutable_signature();
  const ::google::protobuf::RepeatedPtrField< ::safex::SigData >&
      signature() const;

  // @@protoc_insertion_point(class_scope:safex.Signature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::safex::SigData > signature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static Signature* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  inline Transaction* New() const { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional uint64 unlock_time = 2;
  void clear_unlock_time();
  static const int kUnlockTimeFieldNumber = 2;
  ::google::protobuf::uint64 unlock_time() const;
  void set_unlock_time(::google::protobuf::uint64 value);

  // optional bytes extra = 3;
  void clear_extra();
  static const int kExtraFieldNumber = 3;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  void set_extra(const char* value);
  void set_extra(const void* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // repeated .safex.txin_v vin = 4;
  int vin_size() const;
  void clear_vin();
  static const int kVinFieldNumber = 4;
  const ::safex::txin_v& vin(int index) const;
  ::safex::txin_v* mutable_vin(int index);
  ::safex::txin_v* add_vin();
  ::google::protobuf::RepeatedPtrField< ::safex::txin_v >*
      mutable_vin();
  const ::google::protobuf::RepeatedPtrField< ::safex::txin_v >&
      vin() const;

  // repeated .safex.txout vout = 5;
  int vout_size() const;
  void clear_vout();
  static const int kVoutFieldNumber = 5;
  const ::safex::txout& vout(int index) const;
  ::safex::txout* mutable_vout(int index);
  ::safex::txout* add_vout();
  ::google::protobuf::RepeatedPtrField< ::safex::txout >*
      mutable_vout();
  const ::google::protobuf::RepeatedPtrField< ::safex::txout >&
      vout() const;

  // repeated .safex.Signature signatures = 6;
  int signatures_size() const;
  void clear_signatures();
  static const int kSignaturesFieldNumber = 6;
  const ::safex::Signature& signatures(int index) const;
  ::safex::Signature* mutable_signatures(int index);
  ::safex::Signature* add_signatures();
  ::google::protobuf::RepeatedPtrField< ::safex::Signature >*
      mutable_signatures();
  const ::google::protobuf::RepeatedPtrField< ::safex::Signature >&
      signatures() const;

  // optional uint64 block_height = 7;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 7;
  ::google::protobuf::uint64 block_height() const;
  void set_block_height(::google::protobuf::uint64 value);

  // optional uint64 block_timestamp = 8;
  void clear_block_timestamp();
  static const int kBlockTimestampFieldNumber = 8;
  ::google::protobuf::uint64 block_timestamp() const;
  void set_block_timestamp(::google::protobuf::uint64 value);

  // optional bool double_spend_seen = 9;
  void clear_double_spend_seen();
  static const int kDoubleSpendSeenFieldNumber = 9;
  bool double_spend_seen() const;
  void set_double_spend_seen(bool value);

  // optional bool in_pool = 10;
  void clear_in_pool();
  static const int kInPoolFieldNumber = 10;
  bool in_pool() const;
  void set_in_pool(bool value);

  // repeated uint64 output_indices = 11;
  int output_indices_size() const;
  void clear_output_indices();
  static const int kOutputIndicesFieldNumber = 11;
  ::google::protobuf::uint64 output_indices(int index) const;
  void set_output_indices(int index, ::google::protobuf::uint64 value);
  void add_output_indices(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      output_indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_output_indices();

  // optional string tx_hash = 12;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 12;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // @@protoc_insertion_point(class_scope:safex.Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 unlock_time_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::RepeatedPtrField< ::safex::txin_v > vin_;
  ::google::protobuf::RepeatedPtrField< ::safex::txout > vout_;
  ::google::protobuf::RepeatedPtrField< ::safex::Signature > signatures_;
  ::google::protobuf::uint64 block_height_;
  ::google::protobuf::uint64 block_timestamp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > output_indices_;
  mutable int _output_indices_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  bool double_spend_seen_;
  bool in_pool_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class Transactions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Transactions) */ {
 public:
  Transactions();
  virtual ~Transactions();

  Transactions(const Transactions& from);

  inline Transactions& operator=(const Transactions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transactions& default_instance();

  void Swap(Transactions* other);

  // implements Message ----------------------------------------------

  inline Transactions* New() const { return New(NULL); }

  Transactions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transactions& from);
  void MergeFrom(const Transactions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transactions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .safex.Transaction tx = 1;
  int tx_size() const;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::safex::Transaction& tx(int index) const;
  ::safex::Transaction* mutable_tx(int index);
  ::safex::Transaction* add_tx();
  ::google::protobuf::RepeatedPtrField< ::safex::Transaction >*
      mutable_tx();
  const ::google::protobuf::RepeatedPtrField< ::safex::Transaction >&
      tx() const;

  // repeated string missed_txs = 2;
  int missed_txs_size() const;
  void clear_missed_txs();
  static const int kMissedTxsFieldNumber = 2;
  const ::std::string& missed_txs(int index) const;
  ::std::string* mutable_missed_txs(int index);
  void set_missed_txs(int index, const ::std::string& value);
  void set_missed_txs(int index, const char* value);
  void set_missed_txs(int index, const char* value, size_t size);
  ::std::string* add_missed_txs();
  void add_missed_txs(const ::std::string& value);
  void add_missed_txs(const char* value);
  void add_missed_txs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& missed_txs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_missed_txs();

  // @@protoc_insertion_point(class_scope:safex.Transactions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::safex::Transaction > tx_;
  ::google::protobuf::RepeatedPtrField< ::std::string> missed_txs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transactions_2eproto();
  friend void protobuf_AssignDesc_transactions_2eproto();
  friend void protobuf_ShutdownFile_transactions_2eproto();

  void InitAsDefaultInstance();
  static Transactions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// txin_gen

// optional uint64 height = 1;
inline void txin_gen::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txin_gen::height() const {
  // @@protoc_insertion_point(field_get:safex.txin_gen.height)
  return height_;
}
inline void txin_gen::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_gen.height)
}

// -------------------------------------------------------------------

// txin_to_key

// optional uint64 amount = 1;
inline void txin_to_key::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txin_to_key::amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.amount)
  return amount_;
}
inline void txin_to_key::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_to_key.amount)
}

// optional bytes k_image = 2;
inline void txin_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txin_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_to_key::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.k_image)
}
inline void txin_to_key::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_to_key.k_image)
}
inline void txin_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_to_key.k_image)
}
inline ::std::string* txin_to_key::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_to_key.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txin_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_to_key::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
inline int txin_to_key::key_offsets_size() const {
  return key_offsets_.size();
}
inline void txin_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
inline ::google::protobuf::uint64 txin_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.key_offsets)
  return key_offsets_.Get(index);
}
inline void txin_to_key::set_key_offsets(int index, ::google::protobuf::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.key_offsets)
}
inline void txin_to_key::add_key_offsets(::google::protobuf::uint64 value) {
  key_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:safex.txin_to_key.key_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
txin_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_to_key.key_offsets)
  return key_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
txin_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_to_key.key_offsets)
  return &key_offsets_;
}

// -------------------------------------------------------------------

// txin_token_to_key

// optional uint64 token_amount = 1;
inline void txin_token_to_key::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txin_token_to_key::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.token_amount)
  return token_amount_;
}
inline void txin_token_to_key::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.token_amount)
}

// optional bytes k_image = 2;
inline void txin_token_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txin_token_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_to_key::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.k_image)
}
inline void txin_token_to_key::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_to_key.k_image)
}
inline void txin_token_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_to_key.k_image)
}
inline ::std::string* txin_token_to_key::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_to_key.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txin_token_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_to_key::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
inline int txin_token_to_key::key_offsets_size() const {
  return key_offsets_.size();
}
inline void txin_token_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
inline ::google::protobuf::uint64 txin_token_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.key_offsets)
  return key_offsets_.Get(index);
}
inline void txin_token_to_key::set_key_offsets(int index, ::google::protobuf::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.key_offsets)
}
inline void txin_token_to_key::add_key_offsets(::google::protobuf::uint64 value) {
  key_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:safex.txin_token_to_key.key_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
txin_token_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_token_to_key.key_offsets)
  return key_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
txin_token_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_token_to_key.key_offsets)
  return &key_offsets_;
}

// -------------------------------------------------------------------

// txin_token_migration

// optional uint64 token_amount = 1;
inline void txin_token_migration::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txin_token_migration::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.token_amount)
  return token_amount_;
}
inline void txin_token_migration::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.token_amount)
}

// optional string bitcoin_burn_transaction = 2;
inline void txin_token_migration::clear_bitcoin_burn_transaction() {
  bitcoin_burn_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txin_token_migration::bitcoin_burn_transaction() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.bitcoin_burn_transaction)
  return bitcoin_burn_transaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const ::std::string& value) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const char* value) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const char* value, size_t size) {
  
  bitcoin_burn_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline ::std::string* txin_token_migration::mutable_bitcoin_burn_transaction() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.bitcoin_burn_transaction)
  return bitcoin_burn_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txin_token_migration::release_bitcoin_burn_transaction() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.bitcoin_burn_transaction)
  
  return bitcoin_burn_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_allocated_bitcoin_burn_transaction(::std::string* bitcoin_burn_transaction) {
  if (bitcoin_burn_transaction != NULL) {
    
  } else {
    
  }
  bitcoin_burn_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitcoin_burn_transaction);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.bitcoin_burn_transaction)
}

// optional bytes k_image = 3;
inline void txin_token_migration::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txin_token_migration::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.k_image)
  return k_image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_k_image(const ::std::string& value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.k_image)
}
inline void txin_token_migration::set_k_image(const char* value) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.k_image)
}
inline void txin_token_migration::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.k_image)
}
inline ::std::string* txin_token_migration::mutable_k_image() {
  
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.k_image)
  return k_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txin_token_migration::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.k_image)
  
  return k_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_allocated_k_image(::std::string* k_image) {
  if (k_image != NULL) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.k_image)
}

// -------------------------------------------------------------------

// txin_v

// optional .safex.txin_gen txin_gen = 1;
inline bool txin_v::has_txin_gen() const {
  return !_is_default_instance_ && txin_gen_ != NULL;
}
inline void txin_v::clear_txin_gen() {
  if (GetArenaNoVirtual() == NULL && txin_gen_ != NULL) delete txin_gen_;
  txin_gen_ = NULL;
}
inline const ::safex::txin_gen& txin_v::txin_gen() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_gen)
  return txin_gen_ != NULL ? *txin_gen_ : *default_instance_->txin_gen_;
}
inline ::safex::txin_gen* txin_v::mutable_txin_gen() {
  
  if (txin_gen_ == NULL) {
    txin_gen_ = new ::safex::txin_gen;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_gen)
  return txin_gen_;
}
inline ::safex::txin_gen* txin_v::release_txin_gen() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_gen)
  
  ::safex::txin_gen* temp = txin_gen_;
  txin_gen_ = NULL;
  return temp;
}
inline void txin_v::set_allocated_txin_gen(::safex::txin_gen* txin_gen) {
  delete txin_gen_;
  txin_gen_ = txin_gen;
  if (txin_gen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_gen)
}

// optional .safex.txin_to_key txin_to_key = 2;
inline bool txin_v::has_txin_to_key() const {
  return !_is_default_instance_ && txin_to_key_ != NULL;
}
inline void txin_v::clear_txin_to_key() {
  if (GetArenaNoVirtual() == NULL && txin_to_key_ != NULL) delete txin_to_key_;
  txin_to_key_ = NULL;
}
inline const ::safex::txin_to_key& txin_v::txin_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_to_key)
  return txin_to_key_ != NULL ? *txin_to_key_ : *default_instance_->txin_to_key_;
}
inline ::safex::txin_to_key* txin_v::mutable_txin_to_key() {
  
  if (txin_to_key_ == NULL) {
    txin_to_key_ = new ::safex::txin_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_to_key)
  return txin_to_key_;
}
inline ::safex::txin_to_key* txin_v::release_txin_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_to_key)
  
  ::safex::txin_to_key* temp = txin_to_key_;
  txin_to_key_ = NULL;
  return temp;
}
inline void txin_v::set_allocated_txin_to_key(::safex::txin_to_key* txin_to_key) {
  delete txin_to_key_;
  txin_to_key_ = txin_to_key;
  if (txin_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_to_key)
}

// optional .safex.txin_token_to_key txin_token_to_key = 3;
inline bool txin_v::has_txin_token_to_key() const {
  return !_is_default_instance_ && txin_token_to_key_ != NULL;
}
inline void txin_v::clear_txin_token_to_key() {
  if (GetArenaNoVirtual() == NULL && txin_token_to_key_ != NULL) delete txin_token_to_key_;
  txin_token_to_key_ = NULL;
}
inline const ::safex::txin_token_to_key& txin_v::txin_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_to_key)
  return txin_token_to_key_ != NULL ? *txin_token_to_key_ : *default_instance_->txin_token_to_key_;
}
inline ::safex::txin_token_to_key* txin_v::mutable_txin_token_to_key() {
  
  if (txin_token_to_key_ == NULL) {
    txin_token_to_key_ = new ::safex::txin_token_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_to_key)
  return txin_token_to_key_;
}
inline ::safex::txin_token_to_key* txin_v::release_txin_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_to_key)
  
  ::safex::txin_token_to_key* temp = txin_token_to_key_;
  txin_token_to_key_ = NULL;
  return temp;
}
inline void txin_v::set_allocated_txin_token_to_key(::safex::txin_token_to_key* txin_token_to_key) {
  delete txin_token_to_key_;
  txin_token_to_key_ = txin_token_to_key;
  if (txin_token_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_to_key)
}

// optional .safex.txin_token_migration txin_token_migration = 4;
inline bool txin_v::has_txin_token_migration() const {
  return !_is_default_instance_ && txin_token_migration_ != NULL;
}
inline void txin_v::clear_txin_token_migration() {
  if (GetArenaNoVirtual() == NULL && txin_token_migration_ != NULL) delete txin_token_migration_;
  txin_token_migration_ = NULL;
}
inline const ::safex::txin_token_migration& txin_v::txin_token_migration() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_migration)
  return txin_token_migration_ != NULL ? *txin_token_migration_ : *default_instance_->txin_token_migration_;
}
inline ::safex::txin_token_migration* txin_v::mutable_txin_token_migration() {
  
  if (txin_token_migration_ == NULL) {
    txin_token_migration_ = new ::safex::txin_token_migration;
  }
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_migration)
  return txin_token_migration_;
}
inline ::safex::txin_token_migration* txin_v::release_txin_token_migration() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_migration)
  
  ::safex::txin_token_migration* temp = txin_token_migration_;
  txin_token_migration_ = NULL;
  return temp;
}
inline void txin_v::set_allocated_txin_token_migration(::safex::txin_token_migration* txin_token_migration) {
  delete txin_token_migration_;
  txin_token_migration_ = txin_token_migration;
  if (txin_token_migration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_migration)
}

// -------------------------------------------------------------------

// txout_to_key

// optional bytes key = 1;
inline void txout_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txout_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_to_key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txout_to_key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txout_to_key.key)
}
inline void txout_to_key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_to_key.key)
}
inline void txout_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_to_key.key)
}
inline ::std::string* txout_to_key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:safex.txout_to_key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txout_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_to_key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txout_to_key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_to_key.key)
}

// -------------------------------------------------------------------

// txout_token_to_key

// optional bytes key = 1;
inline void txout_token_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& txout_token_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_token_to_key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txout_token_to_key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.txout_token_to_key.key)
}
inline void txout_token_to_key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_token_to_key.key)
}
inline void txout_token_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_token_to_key.key)
}
inline ::std::string* txout_token_to_key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:safex.txout_token_to_key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* txout_token_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_token_to_key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void txout_token_to_key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_token_to_key.key)
}

// -------------------------------------------------------------------

// txout_target_v

// optional .safex.txout_to_key txout_to_key = 1;
inline bool txout_target_v::has_txout_to_key() const {
  return !_is_default_instance_ && txout_to_key_ != NULL;
}
inline void txout_target_v::clear_txout_to_key() {
  if (GetArenaNoVirtual() == NULL && txout_to_key_ != NULL) delete txout_to_key_;
  txout_to_key_ = NULL;
}
inline const ::safex::txout_to_key& txout_target_v::txout_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_to_key)
  return txout_to_key_ != NULL ? *txout_to_key_ : *default_instance_->txout_to_key_;
}
inline ::safex::txout_to_key* txout_target_v::mutable_txout_to_key() {
  
  if (txout_to_key_ == NULL) {
    txout_to_key_ = new ::safex::txout_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_to_key)
  return txout_to_key_;
}
inline ::safex::txout_to_key* txout_target_v::release_txout_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_to_key)
  
  ::safex::txout_to_key* temp = txout_to_key_;
  txout_to_key_ = NULL;
  return temp;
}
inline void txout_target_v::set_allocated_txout_to_key(::safex::txout_to_key* txout_to_key) {
  delete txout_to_key_;
  txout_to_key_ = txout_to_key;
  if (txout_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_to_key)
}

// optional .safex.txout_token_to_key txout_token_to_key = 2;
inline bool txout_target_v::has_txout_token_to_key() const {
  return !_is_default_instance_ && txout_token_to_key_ != NULL;
}
inline void txout_target_v::clear_txout_token_to_key() {
  if (GetArenaNoVirtual() == NULL && txout_token_to_key_ != NULL) delete txout_token_to_key_;
  txout_token_to_key_ = NULL;
}
inline const ::safex::txout_token_to_key& txout_target_v::txout_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_token_to_key)
  return txout_token_to_key_ != NULL ? *txout_token_to_key_ : *default_instance_->txout_token_to_key_;
}
inline ::safex::txout_token_to_key* txout_target_v::mutable_txout_token_to_key() {
  
  if (txout_token_to_key_ == NULL) {
    txout_token_to_key_ = new ::safex::txout_token_to_key;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_token_to_key)
  return txout_token_to_key_;
}
inline ::safex::txout_token_to_key* txout_target_v::release_txout_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_token_to_key)
  
  ::safex::txout_token_to_key* temp = txout_token_to_key_;
  txout_token_to_key_ = NULL;
  return temp;
}
inline void txout_target_v::set_allocated_txout_token_to_key(::safex::txout_token_to_key* txout_token_to_key) {
  delete txout_token_to_key_;
  txout_token_to_key_ = txout_token_to_key;
  if (txout_token_to_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_token_to_key)
}

// -------------------------------------------------------------------

// txout

// optional uint64 amount = 1;
inline void txout::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txout::amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.amount)
  return amount_;
}
inline void txout::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txout.amount)
}

// optional uint64 token_amount = 2;
inline void txout::clear_token_amount() {
  token_amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 txout::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.token_amount)
  return token_amount_;
}
inline void txout::set_token_amount(::google::protobuf::uint64 value) {
  
  token_amount_ = value;
  // @@protoc_insertion_point(field_set:safex.txout.token_amount)
}

// optional .safex.txout_target_v target = 3;
inline bool txout::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
inline void txout::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::safex::txout_target_v& txout::target() const {
  // @@protoc_insertion_point(field_get:safex.txout.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::safex::txout_target_v* txout::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::safex::txout_target_v;
  }
  // @@protoc_insertion_point(field_mutable:safex.txout.target)
  return target_;
}
inline ::safex::txout_target_v* txout::release_target() {
  // @@protoc_insertion_point(field_release:safex.txout.target)
  
  ::safex::txout_target_v* temp = target_;
  target_ = NULL;
  return temp;
}
inline void txout::set_allocated_target(::safex::txout_target_v* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:safex.txout.target)
}

// -------------------------------------------------------------------

// SigData

// optional bytes r = 1;
inline void SigData::clear_r() {
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SigData::r() const {
  // @@protoc_insertion_point(field_get:safex.SigData.r)
  return r_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_r(const ::std::string& value) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.SigData.r)
}
inline void SigData::set_r(const char* value) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.r)
}
inline void SigData::set_r(const void* value, size_t size) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.r)
}
inline ::std::string* SigData::mutable_r() {
  
  // @@protoc_insertion_point(field_mutable:safex.SigData.r)
  return r_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigData::release_r() {
  // @@protoc_insertion_point(field_release:safex.SigData.r)
  
  return r_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_allocated_r(::std::string* r) {
  if (r != NULL) {
    
  } else {
    
  }
  r_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), r);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.r)
}

// optional bytes c = 2;
inline void SigData::clear_c() {
  c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SigData::c() const {
  // @@protoc_insertion_point(field_get:safex.SigData.c)
  return c_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_c(const ::std::string& value) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.SigData.c)
}
inline void SigData::set_c(const char* value) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.c)
}
inline void SigData::set_c(const void* value, size_t size) {
  
  c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.c)
}
inline ::std::string* SigData::mutable_c() {
  
  // @@protoc_insertion_point(field_mutable:safex.SigData.c)
  return c_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigData::release_c() {
  // @@protoc_insertion_point(field_release:safex.SigData.c)
  
  return c_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_allocated_c(::std::string* c) {
  if (c != NULL) {
    
  } else {
    
  }
  c_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), c);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.c)
}

// -------------------------------------------------------------------

// Signature

// repeated .safex.SigData signature = 1;
inline int Signature::signature_size() const {
  return signature_.size();
}
inline void Signature::clear_signature() {
  signature_.Clear();
}
inline const ::safex::SigData& Signature::signature(int index) const {
  // @@protoc_insertion_point(field_get:safex.Signature.signature)
  return signature_.Get(index);
}
inline ::safex::SigData* Signature::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Signature.signature)
  return signature_.Mutable(index);
}
inline ::safex::SigData* Signature::add_signature() {
  // @@protoc_insertion_point(field_add:safex.Signature.signature)
  return signature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::SigData >*
Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:safex.Signature.signature)
  return &signature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::SigData >&
Signature::signature() const {
  // @@protoc_insertion_point(field_list:safex.Signature.signature)
  return signature_;
}

// -------------------------------------------------------------------

// Transaction

// optional uint64 version = 1;
inline void Transaction::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::version() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.version)
  return version_;
}
inline void Transaction::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.version)
}

// optional uint64 unlock_time = 2;
inline void Transaction::clear_unlock_time() {
  unlock_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::unlock_time() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.unlock_time)
  return unlock_time_;
}
inline void Transaction::set_unlock_time(::google::protobuf::uint64 value) {
  
  unlock_time_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.unlock_time)
}

// optional bytes extra = 3;
inline void Transaction::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::extra() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.extra)
  return extra_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Transaction.extra)
}
inline void Transaction::set_extra(const char* value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.extra)
}
inline void Transaction::set_extra(const void* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.extra)
}
inline ::std::string* Transaction::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:safex.Transaction.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_extra() {
  // @@protoc_insertion_point(field_release:safex.Transaction.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.extra)
}

// repeated .safex.txin_v vin = 4;
inline int Transaction::vin_size() const {
  return vin_.size();
}
inline void Transaction::clear_vin() {
  vin_.Clear();
}
inline const ::safex::txin_v& Transaction::vin(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vin)
  return vin_.Get(index);
}
inline ::safex::txin_v* Transaction::mutable_vin(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vin)
  return vin_.Mutable(index);
}
inline ::safex::txin_v* Transaction::add_vin() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vin)
  return vin_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::txin_v >*
Transaction::mutable_vin() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vin)
  return &vin_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::txin_v >&
Transaction::vin() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vin)
  return vin_;
}

// repeated .safex.txout vout = 5;
inline int Transaction::vout_size() const {
  return vout_.size();
}
inline void Transaction::clear_vout() {
  vout_.Clear();
}
inline const ::safex::txout& Transaction::vout(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vout)
  return vout_.Get(index);
}
inline ::safex::txout* Transaction::mutable_vout(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vout)
  return vout_.Mutable(index);
}
inline ::safex::txout* Transaction::add_vout() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vout)
  return vout_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::txout >*
Transaction::mutable_vout() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vout)
  return &vout_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::txout >&
Transaction::vout() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vout)
  return vout_;
}

// repeated .safex.Signature signatures = 6;
inline int Transaction::signatures_size() const {
  return signatures_.size();
}
inline void Transaction::clear_signatures() {
  signatures_.Clear();
}
inline const ::safex::Signature& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.signatures)
  return signatures_.Get(index);
}
inline ::safex::Signature* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.signatures)
  return signatures_.Mutable(index);
}
inline ::safex::Signature* Transaction::add_signatures() {
  // @@protoc_insertion_point(field_add:safex.Transaction.signatures)
  return signatures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::Signature >*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.signatures)
  return &signatures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::Signature >&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.signatures)
  return signatures_;
}

// optional uint64 block_height = 7;
inline void Transaction::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::block_height() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_height)
  return block_height_;
}
inline void Transaction::set_block_height(::google::protobuf::uint64 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.block_height)
}

// optional uint64 block_timestamp = 8;
inline void Transaction::clear_block_timestamp() {
  block_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::block_timestamp() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_timestamp)
  return block_timestamp_;
}
inline void Transaction::set_block_timestamp(::google::protobuf::uint64 value) {
  
  block_timestamp_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.block_timestamp)
}

// optional bool double_spend_seen = 9;
inline void Transaction::clear_double_spend_seen() {
  double_spend_seen_ = false;
}
inline bool Transaction::double_spend_seen() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.double_spend_seen)
  return double_spend_seen_;
}
inline void Transaction::set_double_spend_seen(bool value) {
  
  double_spend_seen_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.double_spend_seen)
}

// optional bool in_pool = 10;
inline void Transaction::clear_in_pool() {
  in_pool_ = false;
}
inline bool Transaction::in_pool() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.in_pool)
  return in_pool_;
}
inline void Transaction::set_in_pool(bool value) {
  
  in_pool_ = value;
  // @@protoc_insertion_point(field_set:safex.Transaction.in_pool)
}

// repeated uint64 output_indices = 11;
inline int Transaction::output_indices_size() const {
  return output_indices_.size();
}
inline void Transaction::clear_output_indices() {
  output_indices_.Clear();
}
inline ::google::protobuf::uint64 Transaction::output_indices(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.output_indices)
  return output_indices_.Get(index);
}
inline void Transaction::set_output_indices(int index, ::google::protobuf::uint64 value) {
  output_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.Transaction.output_indices)
}
inline void Transaction::add_output_indices(::google::protobuf::uint64 value) {
  output_indices_.Add(value);
  // @@protoc_insertion_point(field_add:safex.Transaction.output_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Transaction::output_indices() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.output_indices)
  return output_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Transaction::mutable_output_indices() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.output_indices)
  return &output_indices_;
}

// optional string tx_hash = 12;
inline void Transaction::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::tx_hash() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.tx_hash)
}
inline ::std::string* Transaction::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:safex.Transaction.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_tx_hash() {
  // @@protoc_insertion_point(field_release:safex.Transaction.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.tx_hash)
}

// -------------------------------------------------------------------

// Transactions

// repeated .safex.Transaction tx = 1;
inline int Transactions::tx_size() const {
  return tx_.size();
}
inline void Transactions::clear_tx() {
  tx_.Clear();
}
inline const ::safex::Transaction& Transactions::tx(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.tx)
  return tx_.Get(index);
}
inline ::safex::Transaction* Transactions::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.tx)
  return tx_.Mutable(index);
}
inline ::safex::Transaction* Transactions::add_tx() {
  // @@protoc_insertion_point(field_add:safex.Transactions.tx)
  return tx_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::Transaction >*
Transactions::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.tx)
  return &tx_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::Transaction >&
Transactions::tx() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.tx)
  return tx_;
}

// repeated string missed_txs = 2;
inline int Transactions::missed_txs_size() const {
  return missed_txs_.size();
}
inline void Transactions::clear_missed_txs() {
  missed_txs_.Clear();
}
inline const ::std::string& Transactions::missed_txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.missed_txs)
  return missed_txs_.Get(index);
}
inline ::std::string* Transactions::mutable_missed_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.missed_txs)
  return missed_txs_.Mutable(index);
}
inline void Transactions::set_missed_txs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:safex.Transactions.missed_txs)
  missed_txs_.Mutable(index)->assign(value);
}
inline void Transactions::set_missed_txs(int index, const char* value) {
  missed_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safex.Transactions.missed_txs)
}
inline void Transactions::set_missed_txs(int index, const char* value, size_t size) {
  missed_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safex.Transactions.missed_txs)
}
inline ::std::string* Transactions::add_missed_txs() {
  // @@protoc_insertion_point(field_add_mutable:safex.Transactions.missed_txs)
  return missed_txs_.Add();
}
inline void Transactions::add_missed_txs(const ::std::string& value) {
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safex.Transactions.missed_txs)
}
inline void Transactions::add_missed_txs(const char* value) {
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safex.Transactions.missed_txs)
}
inline void Transactions::add_missed_txs(const char* value, size_t size) {
  missed_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safex.Transactions.missed_txs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Transactions::missed_txs() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.missed_txs)
  return missed_txs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Transactions::mutable_missed_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.missed_txs)
  return &missed_txs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transactions_2eproto__INCLUDED
