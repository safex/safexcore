// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output_histogram.proto

#ifndef PROTOBUF_output_5fhistogram_2eproto__INCLUDED
#define PROTOBUF_output_5fhistogram_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace safex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_output_5fhistogram_2eproto();
void protobuf_AssignDesc_output_5fhistogram_2eproto();
void protobuf_ShutdownFile_output_5fhistogram_2eproto();

class Histogram;
class Histograms;

// ===================================================================

class Histogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Histogram) */ {
 public:
  Histogram();
  virtual ~Histogram();

  Histogram(const Histogram& from);

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram& default_instance();

  void Swap(Histogram* other);

  // implements Message ----------------------------------------------

  inline Histogram* New() const { return New(NULL); }

  Histogram* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Histogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 out_type = 2;
  void clear_out_type();
  static const int kOutTypeFieldNumber = 2;
  ::google::protobuf::uint64 out_type() const;
  void set_out_type(::google::protobuf::uint64 value);

  // optional uint64 recent_instances = 3;
  void clear_recent_instances();
  static const int kRecentInstancesFieldNumber = 3;
  ::google::protobuf::uint64 recent_instances() const;
  void set_recent_instances(::google::protobuf::uint64 value);

  // optional uint64 total_instances = 4;
  void clear_total_instances();
  static const int kTotalInstancesFieldNumber = 4;
  ::google::protobuf::uint64 total_instances() const;
  void set_total_instances(::google::protobuf::uint64 value);

  // optional uint64 unlocked_instances = 5;
  void clear_unlocked_instances();
  static const int kUnlockedInstancesFieldNumber = 5;
  ::google::protobuf::uint64 unlocked_instances() const;
  void set_unlocked_instances(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:safex.Histogram)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 out_type_;
  ::google::protobuf::uint64 recent_instances_;
  ::google::protobuf::uint64 total_instances_;
  ::google::protobuf::uint64 unlocked_instances_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_output_5fhistogram_2eproto();
  friend void protobuf_AssignDesc_output_5fhistogram_2eproto();
  friend void protobuf_ShutdownFile_output_5fhistogram_2eproto();

  void InitAsDefaultInstance();
  static Histogram* default_instance_;
};
// -------------------------------------------------------------------

class Histograms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:safex.Histograms) */ {
 public:
  Histograms();
  virtual ~Histograms();

  Histograms(const Histograms& from);

  inline Histograms& operator=(const Histograms& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Histograms& default_instance();

  void Swap(Histograms* other);

  // implements Message ----------------------------------------------

  inline Histograms* New() const { return New(NULL); }

  Histograms* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histograms& from);
  void MergeFrom(const Histograms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Histograms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .safex.Histogram histograms = 1;
  int histograms_size() const;
  void clear_histograms();
  static const int kHistogramsFieldNumber = 1;
  const ::safex::Histogram& histograms(int index) const;
  ::safex::Histogram* mutable_histograms(int index);
  ::safex::Histogram* add_histograms();
  ::google::protobuf::RepeatedPtrField< ::safex::Histogram >*
      mutable_histograms();
  const ::google::protobuf::RepeatedPtrField< ::safex::Histogram >&
      histograms() const;

  // optional string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:safex.Histograms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::safex::Histogram > histograms_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_output_5fhistogram_2eproto();
  friend void protobuf_AssignDesc_output_5fhistogram_2eproto();
  friend void protobuf_ShutdownFile_output_5fhistogram_2eproto();

  void InitAsDefaultInstance();
  static Histograms* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Histogram

// optional uint64 amount = 1;
inline void Histogram::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Histogram::amount() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.amount)
  return amount_;
}
inline void Histogram::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.amount)
}

// optional uint64 out_type = 2;
inline void Histogram::clear_out_type() {
  out_type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Histogram::out_type() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.out_type)
  return out_type_;
}
inline void Histogram::set_out_type(::google::protobuf::uint64 value) {
  
  out_type_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.out_type)
}

// optional uint64 recent_instances = 3;
inline void Histogram::clear_recent_instances() {
  recent_instances_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Histogram::recent_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.recent_instances)
  return recent_instances_;
}
inline void Histogram::set_recent_instances(::google::protobuf::uint64 value) {
  
  recent_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.recent_instances)
}

// optional uint64 total_instances = 4;
inline void Histogram::clear_total_instances() {
  total_instances_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Histogram::total_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.total_instances)
  return total_instances_;
}
inline void Histogram::set_total_instances(::google::protobuf::uint64 value) {
  
  total_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.total_instances)
}

// optional uint64 unlocked_instances = 5;
inline void Histogram::clear_unlocked_instances() {
  unlocked_instances_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Histogram::unlocked_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.unlocked_instances)
  return unlocked_instances_;
}
inline void Histogram::set_unlocked_instances(::google::protobuf::uint64 value) {
  
  unlocked_instances_ = value;
  // @@protoc_insertion_point(field_set:safex.Histogram.unlocked_instances)
}

// -------------------------------------------------------------------

// Histograms

// repeated .safex.Histogram histograms = 1;
inline int Histograms::histograms_size() const {
  return histograms_.size();
}
inline void Histograms::clear_histograms() {
  histograms_.Clear();
}
inline const ::safex::Histogram& Histograms::histograms(int index) const {
  // @@protoc_insertion_point(field_get:safex.Histograms.histograms)
  return histograms_.Get(index);
}
inline ::safex::Histogram* Histograms::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Histograms.histograms)
  return histograms_.Mutable(index);
}
inline ::safex::Histogram* Histograms::add_histograms() {
  // @@protoc_insertion_point(field_add:safex.Histograms.histograms)
  return histograms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::safex::Histogram >*
Histograms::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:safex.Histograms.histograms)
  return &histograms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::safex::Histogram >&
Histograms::histograms() const {
  // @@protoc_insertion_point(field_list:safex.Histograms.histograms)
  return histograms_;
}

// optional string status = 2;
inline void Histograms::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Histograms::status() const {
  // @@protoc_insertion_point(field_get:safex.Histograms.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Histograms::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safex.Histograms.status)
}
inline void Histograms::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Histograms.status)
}
inline void Histograms::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Histograms.status)
}
inline ::std::string* Histograms::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:safex.Histograms.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Histograms::release_status() {
  // @@protoc_insertion_point(field_release:safex.Histograms.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Histograms::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:safex.Histograms.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_output_5fhistogram_2eproto__INCLUDED
